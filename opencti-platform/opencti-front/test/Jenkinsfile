@Library('utils@dev') _

node {
  Map args             = [:]
  args.name            = 'opencti-front'
  args.systemType      = utils.getSystemType(env.BRANCH_NAME)
  if('unknown' == args.systemType) {
    args.systemType = 'dev'
  }

  try {
    stage('Checkout') {
      checkout scm
      notify.notifyBuild('STARTED');
    }

    stage('Setup') {
      //https://stackoverflow.com/questions/71043534/nodejs-16-dependency-issue-with-libuv
      //workaround for Error: Package: 1:nodejs-16.18.1-3.el7.x86_64 (epel) Requires: libuv >= 1:1.43.0
      sh 'yum remove libuv -y'
      sh 'sudo curl --silent --location https://dl.yarnpkg.com/rpm/yarn.repo -o /etc/yum.repos.d/yarn.repo'
      sh 'sudo yum -y install yarn --disableplugin=priorities'
    }

    dir('opencti-platform/opencti-graphql') {
      stage('Install GraphQL') {
        sh 'yarn install'
      }
    }
    dir('opencti-platform/opencti-front') {
      stage('Configure') {
        //will be copied to darklight/resources/opencti-front/certs.  Files removed outside the withKsm block
        OPENCTI_CRT_PATH = keeperUtils.getCertFilePath('.', args.name, 'crt')
        OPENCTI_KEY_PATH = keeperUtils.getCertFilePath('.', args.name, 'key')
        withKsm(application: [[credentialsId: 'f71b1433-b4e3-4c49-b1e0-a9489323449e',
          secrets: [
            keeperUtils.createEnvEntry('nA6xB8flzxlTDUVIqZuwmg', "login",    'TEST_USER'),
            keeperUtils.createEnvEntry('nA6xB8flzxlTDUVIqZuwmg', "password", 'TEST_PASS'),
            keeperUtils.createFileEntry('W4HjFC-EOYSKQ0Qh1u3S_Q', "opencti-front-localhost.crt", OPENCTI_CRT_PATH),
            keeperUtils.createFileEntry('W4HjFC-EOYSKQ0Qh1u3S_Q', "opencti-front-localhost.key", OPENCTI_KEY_PATH)
          ]
        ]]) {
          sh 'mv darklight/resources/opencti-front/certs/* .'  //preserve files outside withKsm block
          sh '''jq -n --arg u "$TEST_USER" --arg p "$TEST_PASS" '.email=$u|.password=$p' > cypress/fixtures/users.json'''
          def envVars = deployBuilds.processProperties(args.name, args.systemType, true) //load and terp resources/opencti-front/deploy.dev.properties
          writeFile file: '.env', text: envVars.collect{entry->entry.key+"="+entry.value}.sort().join('\n')
        }
      }
      stage('Install Front') {
        sh 'yarn install'
      }
      stage('Start Front') {
        sh 'yarn start'
      }

      //put stages inside docker.image so we have 1 and only 1 container for all operations
      //-u 0; root user so apt install can run
      //--entrypoint='' so cypress/included container doesn't run its entrypoint 'cypress run'
      docker.image('cypress/included:12.6.0').inside(' -u 0 --entrypoint=""') {
        stage('Install Test') {
          // Install app dependencies
          sh 'apt update'
          sh 'apt install -y python3 make g++'
          sh 'yarn install'
        }
        stage('Test') {
          sh 'yarn cypress'
        }
      }
    }
  } catch (Exception e) {
    currentBuild.result = "FAILED"
    throw e
  } finally {
    notify.notifyBuild(currentBuild.result);
  }
}
