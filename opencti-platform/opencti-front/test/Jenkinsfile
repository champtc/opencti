@Library('utils@dev') _

node {
  Map args             = [:]
  args.name            = 'opencti-front'
  args.systemType      = utils.getSystemType(env.BRANCH_NAME)
  if('unknown' == args.systemType) {
    args.systemType = 'dev'
  }

  try {
    stage('Checkout') {
      checkout scm
      notify.notifyBuild('STARTED');
    }

    dir('opencti-platform/opencti-front') {
      stage('Configure') {
        OPENCTI_CRT_PATH = keeperUtils.getCertFilePath('.', args.name, 'opencti-front-localhost.crt')
        OPENCTI_KEY_PATH = keeperUtils.getCertFilePath('.', args.name, 'opencti-front-localhost.key')
        //TODO: cypress Keeper integration instead of creds on disk
        withKsm(application: [[credentialsId: 'f71b1433-b4e3-4c49-b1e0-a9489323449e',
          secrets: [
            keeperUtils.createEnvEntry('nA6xB8flzxlTDUVIqZuwmg', "login",    'TEST_USER'),
            keeperUtils.createEnvEntry('nA6xB8flzxlTDUVIqZuwmg', "password", 'TEST_PASS'),
            keeperUtils.createFileEntry('W4HjFC-EOYSKQ0Qh1u3S_Q', "opencti-front-localhost.crt", OPENCTI_CRT_PATH),
            keeperUtils.createFileEntry('W4HjFC-EOYSKQ0Qh1u3S_Q', "opencti-front-localhost.key", OPENCTI_KEY_PATH)
          ]
        ]]) {
          sh '''jq -n --arg u "$TEST_USER" --arg p "$TEST_PASS" '.email=$u|.password=$p' > cypress/fixtures/users.json'''
          def envVars = deployBuilds.processProperties(args.name, args.systemType, true) //load and terp resources/opencti-front/deploy.dev.properties
          writeFile file: '.env', text: envVars.collect{entry->entry.key+"="+entry.value}.sort().join('\n')
        }
      }
/*
      //put stages inside docker.image so we have 1 and only 1 container for all operations
      //-u 0; root user so apt install can run
      //--entrypoint='' so cypress/included container doesn't run its entrypoint 'cypress run'
      docker.image('cypress/included:12.6.0').inside(' -u 0 --entrypoint=""') {
        stage('Install') {
          // Install app dependencies
          sh 'apt update'
          sh 'apt install -y python3 make g++'
          sh 'yarn install'
        }
        stage('Test') {
          sh 'yarn cypress'
        }
      }
*/
    }
  } catch (Exception e) {
    currentBuild.result = "FAILED"
    throw e
  } finally {
    notify.notifyBuild(currentBuild.result);
  }
}
