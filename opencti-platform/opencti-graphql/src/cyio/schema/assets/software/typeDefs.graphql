  # Query Extensions
  extend type Query {
    softwareAssetList(
        first: Int
        offset: Int
        orderedBy: SoftwareAssetOrdering
        orderMode: OrderingMode
        filters: [SoftwareAssetFiltering]
        filterMode: FilterMode
        search: String
      ): SoftwareAssetConnection @hasPermission(resources: "Asset:view")
    softwareAsset(id: ID!): SoftwareAsset @hasPermission(resources: "Asset:view")
  }

  extend type Mutation {
    # Software
    createSoftwareAsset(input: SoftwareAssetAddInput): SoftwareAsset @hasPermission(resources: "Asset:update")
    deleteSoftwareAsset(id: ID!): String! @hasPermission(resources: "Asset:delete")
    editSoftwareAsset(id: ID!, input: [EditInput]!, commitMessage: String): SoftwareAsset @hasPermission(resources: "Asset:update")
    # Operating System
    createOperatingSystemAsset(input: OperatingSystemAssetAddInput): OperatingSystemAsset @hasPermission(resources: "Asset:update")
    deleteOperatingSystemAsset(id: ID!): String! @hasPermission(resources: "Asset:delete")
    editOperatingSystemAsset(id: ID!, input: [EditInput]!, commitMessage: String): OperatingSystemAsset @hasPermission(resources: "Asset:update")
    # Application Software
    createApplicationSoftwareAsset(input: OperatingSystemAssetAddInput): ApplicationSoftwareAsset @hasPermission(resources: "Asset:update")
    deleteApplicationSoftwareAsset(id: ID!): String! @hasPermission(resources: "Asset:delete")
    editApplicationSoftwareAsset(id: ID!, input: [EditInput]!, commitMessage: String): ApplicationSoftwareAsset @hasPermission(resources: "Asset:update")
  }


  # Query Types
  "Defines identifying information about an instance of software."
  type SoftwareAsset implements BasicObject & LifecycleObject & CoreObject & Asset & ItAsset {
    # BasicObject
    "Uniquely identifies this object."
    id: ID!
    "Identifies the identifier defined by the standard."
    standard_id: String!
    "Identifies the type of the Object."
    entity_type: String!
    "Identifies the parent types of this object."
    parent_types: [String]!
    # LifecycleObject
    created: Timestamp
    modified: Timestamp
    # CoreObject
    "Identifies a set of terms used to describe this object. The terms are user-defined or trust-group defined."
    labels: [CyioLabel]
    "Identifies a list of CyioExternalReferences, each of which refers to information external to the data model. This property is used to provide one or more URLs, descriptions, or IDs to records in other systems."
    external_references: [CyioExternalReference]
    "Identifies one or more references to additional commentary on the Model."
    notes: [CyioNote]
    relationships(
      first: Int
      offset: Int
      orderedBy: OscalRelationshipsOrdering
      orderMode: OrderingMode
      filters: [OscalRelationshipsFiltering]
      filterMode: FilterMode
      search: String
    ): CyioRelationshipConnection
    "Identifies a label or descriptor that is tied to a sensitivity or classification marking system."
    object_markings: [DataMarking]
    "Identifies the name used to display to users"
    display_name: String
    # Asset
    asset_id: String
    name: String!
    description: String
    locations: [AssetLocation]
    # ItAsset
    asset_tag: String
    asset_type: AssetType!
    serial_number: String
    vendor_name: String
    version: String
    release_date: Timestamp
    implementation_point: ImplementationPoint
    operational_status: OperationalStatus
    responsible_parties: [OscalResponsibleParty]
    # SoftwareAsset
    function: String
    cpe_identifier: String
    software_identifier: String
    patch_level: String
    installation_id: String
    license_key: String
    is_publicly_accessible: Boolean
    is_scanned: Boolean
    last_scanned: Timestamp
    # Hyperlinks
    "Indicates the assets on which the software is installed"
    installed_on: [HardwareAsset]
    "Indicates the risks related to this entity."
    related_risks: [Risk]
    risk_count: Int
    top_risk_severity: RiskLevel
}

  "Defines identifying information about an instance of operating system software."
  type OperatingSystemAsset implements BasicObject & LifecycleObject & CoreObject & Asset & ItAsset {
    # BasicObject
    "Uniquely identifies this object."
    id: ID!
    "Identifies the identifier defined by the standard."
    standard_id: String!
    "Identifies the type of the Object."
    entity_type: String!
    "Identifies the parent types of this object."
    parent_types: [String]!
    # LifecycleObject
    created: Timestamp
    modified: Timestamp
    # CoreObject
    "Identifies a set of terms used to describe this object. The terms are user-defined or trust-group defined."
    labels: [CyioLabel]
    "Identifies a list of CyioExternalReferences, each of which refers to information external to the data model. This property is used to provide one or more URLs, descriptions, or IDs to records in other systems."
    external_references: [CyioExternalReference]
    "Identifies one or more references to additional commentary on the Model."
    notes: [CyioNote]
    relationships(
      first: Int
      offset: Int
      orderedBy: OscalRelationshipsOrdering
      orderMode: OrderingMode
      filters: [OscalRelationshipsFiltering]
      filterMode: FilterMode
      search: String
    ): CyioRelationshipConnection
    "Identifies a label or descriptor that is tied to a sensitivity or classification marking system."
    object_markings: [DataMarking]
    "Identifies the name used to display to users"
    display_name: String
    # Asset
    asset_id: String
    name: String!
    description: String
    locations: [AssetLocation]
    # ItAsset
    asset_tag: String
    asset_type: AssetType!
    serial_number: String
    vendor_name: String
    version: String
    release_date: Timestamp
    implementation_point: ImplementationPoint
    operational_status: OperationalStatus
    responsible_parties: [OscalResponsibleParty]
    # SoftwareAsset
    function: String
    cpe_identifier: String
    software_identifier: String
    patch_level: String
    installation_id: String
    license_key: String
    is_publicly_accessible: Boolean
    is_scanned: Boolean
    last_scanned: Timestamp
    # Hyperlinks
    "Indicates the assets on which the software is installed"
    installed_on: [HardwareAsset]
    # Operating SystemAsset
    "Indicates the family to which the operating system belongs"
    family: FamilyType
  }

  "Defines identifying information about an instance of application software."
  type ApplicationSoftwareAsset implements BasicObject & LifecycleObject & CoreObject & Asset & ItAsset {
    # BasicObject
    "Uniquely identifies this object."
    id: ID!
    "Identifies the identifier defined by the standard."
    standard_id: String!
    "Identifies the type of the Object."
    entity_type: String!
    "Identifies the parent types of this object."
    parent_types: [String]!
    # LifecycleObject
    created: Timestamp
    modified: Timestamp
    # CoreObject
    "Identifies a set of terms used to describe this object. The terms are user-defined or trust-group defined."
    labels: [CyioLabel]
    "Identifies a list of CyioExternalReferences, each of which refers to information external to the data model. This property is used to provide one or more URLs, descriptions, or IDs to records in other systems."
    external_references: [CyioExternalReference]
    "Identifies one or more references to additional commentary on the Model."
    notes: [CyioNote]
    relationships(
      first: Int
      offset: Int
      orderedBy: OscalRelationshipsOrdering
      orderMode: OrderingMode
      filters: [OscalRelationshipsFiltering]
      filterMode: FilterMode
      search: String
    ): CyioRelationshipConnection
    "Identifies a label or descriptor that is tied to a sensitivity or classification marking system."
    object_markings: [DataMarking]
    "Identifies the name used to display to users"
    display_name: String
    # Asset
    asset_id: String
    name: String!
    description: String
    locations: [AssetLocation]
    # ItAsset
    asset_tag: String
    asset_type: AssetType!
    serial_number: String
    vendor_name: String
    version: String
    release_date: Timestamp
    implementation_point: ImplementationPoint
    operational_status: OperationalStatus
    responsible_parties: [OscalResponsibleParty]
    # SoftwareAsset
    function: String
    cpe_identifier: String
    software_identifier: String
    patch_level: String
    installation_id: String
    license_key: String
    is_publicly_accessible: Boolean
    is_scanned: Boolean
    last_scanned: Timestamp
    # Hyperlinks
    "Indicates the assets on which the software is installed"
    installed_on: [HardwareAsset]
}

  # Mutation Types
  input SoftwareAssetAddInput {
    # Asset
    asset_id: String
    name: String!
    description: String
    # ItAsset
    asset_tag: String
    asset_type: AssetType!
    serial_number: String
    vendor_name: String
    version: String
    release_date: Timestamp
    implementation_point: ImplementationPoint
    operational_status: OperationalStatus
    # SoftwareAsset
    function: String
    cpe_identifier: String
    software_identifier: String
    patch_level: String
    installation_id: String
    license_key: String
    is_publicly_accessible: Boolean
    is_scanned: Boolean
    last_scanned: Timestamp
    "Identifies a label or descriptor that is tied to a sensitivity or classification marking system."
    object_markings: [ID]
  }

  input OperatingSystemAssetAddInput {
    # Asset
    asset_id: String
    name: String!
    description: String
    # ItAsset
    asset_tag: String
    asset_type: AssetType!
    serial_number: String
    vendor_name: String
    version: String
    release_date: Timestamp
    implementation_point: ImplementationPoint
    operational_status: OperationalStatus
    # SoftwareAsset
    function: String
    cpe_identifier: String
    software_identifier: String
    patch_level: String
    installation_id: String
    license_key: String
    is_publicly_accessible: Boolean
    is_scanned: Boolean
    last_scanned: Timestamp
    # Operating SystemAsset
    family: FamilyType
    "Identifies a label or descriptor that is tied to a sensitivity or classification marking system."
    object_markings: [ID]
  }

  input ApplicationSoftwareAssetAddInput {
    # Asset
    asset_id: String
    name: String!
    description: String
    # ItAsset
    asset_tag: String
    asset_type: AssetType!
    serial_number: String
    vendor_name: String
    version: String
    release_date: Timestamp
    implementation_point: ImplementationPoint
    operational_status: OperationalStatus
    # SoftwareAsset
    function: String
    cpe_identifier: String
    software_identifier: String
    patch_level: String
    installation_id: String
    license_key: String
    is_publicly_accessible: Boolean
    is_scanned: Boolean
    last_scanned: Timestamp
    "Identifies a label or descriptor that is tied to a sensitivity or classification marking system."
    object_markings: [ID]
  }

  enum FamilyType {
    "Windows"
    windows
    "Linux"
    linux
    "MacOS"
    macos
    "Other"
    other
  }

  # Pagination Types
  type SoftwareAssetConnection {
    pageInfo: PageInfo!
    edges: [SoftwareAssetEdge]
  }

  type SoftwareAssetEdge {
    cursor: String!
    node: SoftwareAsset!
  }

  # Slicing Types
  enum SoftwareAssetOrdering {
    "Display Name"
    display_name
    "Name"
    name
    "Asset Type"
    asset_type
    "Vendor Name"
    vendor_name
    "CPE Identifier"
    cpe_identifier
    "Software Identifier"
    software_identifier
    "Label"
    label_name
    "Risk Count"
    risk_count
    "Top Risk Severity"
    top_risk_severity
  }

  # Filtering Types
  input SoftwareAssetFiltering {
    key: SoftwareAssetFilter!
    values: [String]
    operator: String
    filterMode: FilterMode 
  }

  "Defines the list of fields that can be filtered upon for Software Assets."
  enum SoftwareAssetFilter {
    "Created"
    created       # Created before/Created after (key: created, values: ["2021-11-10"], operator: "gt|lt")
    "Modified"
    modified      # Modified before/Created after (key: created, values: ["2021-11-10"], operator: "gt|lt")
    "Name"
    name          # Name (key:name, values: ["name1","name2"], operator: "matches", filterMode: "or")
    "Asset Type"
    asset_type    # Asset Type (key:asset_type, values: ["type1","type2","type3"], operator: "matches", filterMode: "or")
    "Label"
    label_name        # Label (key:labels, values:["label1","label2"], operator: "matches", filterMode: "or")
    "Location"
    location_name
    "Vendor Name"
    vendor_name   # Vendor (key:vendor_name, values:["vendor1","vendor2"], operator: "matches", filterMode: "or")
  }

  # this is used to restrict the set of asset_types values that are allowed in a filter
  "Defines the list of Software assets types that can be used in filtering."
  enum SoftwareAssetTypes {
    "Software"
    software
    "Application Software"
    application_software
    "Operating System"
    operating_system
  }

  union SoftwareKind = SoftwareAsset | ApplicationSoftwareAsset | OperatingSystemAsset
