# declares the query entry-points for this type
extend type Query {
  finding(id: ID!): Finding  @hasPermission(resources: "AssessmentResults:view")
  findings(
    first: Int
    offset: Int
    orderedBy: FindingOrdering
    orderMode: OrderingMode
    filters: [FindingFiltering]
    filterMode: FilterMode
    search: String @constraint(minLength: 2)
  ): FindingConnection @hasPermission(resources: "AssessmentResults:view")
}

# declares the mutation entry-points for this type
extend type Mutation {
  createFinding(input: FindingInput!): Finding @hasPermission(resources: "AssessmentResults:update")
  deleteFinding(id: ID!): ID @hasPermission(resources: "AssessmentResults:delete")
  deleteFindings(id: [ID!]!): ID @hasPermission(resources: "AssessmentResults:delete")
  editFinding(id: ID!, input: [EditInput]!, commitMessage: String): Finding @hasPermission(resources: "AssessmentResults:update")
  attachToFinding(id: ID!, field: String!, entityId: ID!): Boolean @hasPermission(resources: "AssessmentResults:update")
  detachFromFinding(id: ID!, field: String!, entityId: ID!): Boolean @hasPermission(resources: "AssessmentResults:update")
  # FindingTarget
  createFindingTarget(input: FindingTargetInput!): FindingTarget @hasPermission(resources: "AssessmentResults:update")
  deleteFindingTarget(id: ID!): ID @hasPermission(resources: "AssessmentResults:delete")
  editFindingTarget(id: ID!, input: [EditInput]!, commitMessage: String): FindingTarget @hasPermission(resources: "AssessmentResults:update")
  attachToFindingTarget(id: ID!, field: String!, entityId: ID!): Boolean @hasPermission(resources: "AssessmentResults:update")
  detachFromFindingTarget(id: ID!, field: String!, entityId: ID!): Boolean @hasPermission(resources: "AssessmentResults:update")
}

"""
Defines identifying information about an individual finding.
"""
type Finding implements BasicObject & LifecycleObject & OscalObject {
  # BasicObject
  "Uniquely identifies this object."
  id: ID!
  "Identifies the identifier defined by the standard."
  standard_id: String!
  "Identifies the type of the Object."
  entity_type: String!
  "Identifies the parent types of this object."
  parent_types: [String]!
  # LifecycleObject
  "Indicates the date and time at which the object was originally created."
  created: Timestamp
  "Indicates the date and time that this particular version of the object was last modified."
  modified: Timestamp
  # OscalObject
  "Identifies a set of terms used to describe this object. The terms are user-defined or trust-group defined."
  labels: [CyioLabel]
  "Identifies a list of CyioExternalReferences, each of which refers to information external to the data model. This property is used to provide one or more URLs, descriptions, or IDs to records in other systems."
  links: [CyioExternalReference]
  "Identifies one or more references to additional commentary on the Model."
  remarks: [CyioNote]
  "Identifies one or more relationships to other entities."
  relationships(
    first: Int
    offset: Int
    orderedBy: OscalRelationshipsOrdering
    orderMode: OrderingMode
    filters: [OscalRelationshipsFiltering]
    filterMode: FilterMode
    search: String
  ): OscalRelationshipConnection
  "Identifies a label or descriptor that is tied to a sensitivity or classification marking system."
  object_markings: [DataMarking]
  "Identifies a human readable name for the result of the assessment that should be shown to the user."
  display_name: String
  # Finding
  "Identifies the name for this Finding item."
  name: String!
  "Identifies a human-readable description of the Finding item."
  description: String!
  "Identifies one or more sources of the finding, such as a tool, interviewed person, or activity."
  origins: [Origin]
  "Identifies an assessor's conclusions regarding the degree to which an objective is satisfied."
  target: FindingTarget
  # "Identifies a reference to the implementation statement in the SSP to which this finding is related."
  # implementation_statement: ImplementationStatement
  "Relates the finding to a set of referenced observations that were used to determine the finding."
  related_observations(first: Int, offset: Int): ObservationConnection
  "Relates the finding to a set of referenced risks that were used to determine the finding."
  related_risks(first: Int, offset: Int): RiskConnection
}
input FindingInput {
  "Identifies the name for this Finding item."
  name: String!
  "Identifies a human-readable description of the Finding item."
  description: String!
  "Identifies an assessor's conclusions regarding the degree to which an objective is satisfied."
  target: FindingTargetInput
  "Identifies a reference to the implementation statement in the SSP to which this finding is related."
  implementation_statement: ID
  "Identifies a label or descriptor that is tied to a sensitivity or classification marking system."
  object_markings: [ID]
}

enum FindingOrdering {
  created
  modified
  name
}
enum FindingFilter {
  name
}
input FindingFiltering {
  key: [FindingFilter!]!
  values: [String]
  operator: String
  filterMode: FilterMode
}
type FindingConnection {
  pageInfo: PageInfo!
  edges: [FindingEdge]
}
type FindingEdge {
  cursor: String!
  node: Finding!
}


"""
Defines an assessor's conclusions regarding the degree to which an objective is satisfied.
"""
type FindingTarget implements ComplexDatatype {
  "Uniquely identifies this object."
  id: ID!
  "Identifies the type of the Object."
  entity_type: String!
  # FindingTarget
  "Identifies the type of the target"
  target_type: TargetType!
  "Identifies a reference to the specific target qualified by the target type."
  target: Target!
  "Identifies a title for the finding target"
  title: String
  "Identifies a human-readable description of the assessor's conclusions regarding the degree to which an objective is satisfied."
  description: String
  "Identifies one or more attributes, characteristics, or qualities of the containing object expressed as a namespace qualified name/value pair. The value of a property is a simple scalar value, which may be expressed as a list of values."
  props: [Property]
  "Identifies a list of references to a local or remote resource."
  links: [Link]
  "Identifies as to whether the objective is satisfied or not."
  objective_status_state: ObjectiveStatusStateType!
  "Identifies the reason the objective was given it's status.  Reason may contain any value, and should be used to communicate additional information regarding the status."
  objective_status_reason: ObjectiveStatusReasonType!
  "Indicates the degree to which the a given control is implemented."
  implementation_status: ImplementationStatus 
  "Identifies additional commentary on the containing object."
  remarks: [CyioNote]
}
input FindingTargetInput {
  "Identifies the type of the target"
  target_type: TargetType!
  "Identifies a reference to the specific target qualified by the target type."
  target: ID!
  "Identifies a title for the finding target"
  title: String
  "Identifies a human-readable description of the assessor's conclusions regarding the degree to which an objective is satisfied."
  description: String
  "Identifies as to whether the objective is satisfied or not."
  objective_status_state: ObjectiveStatusStateType!
  "Identifies the reason the objective was given it's status.  Reason may contain any value, and should be used to communicate additional information regarding the status."
  objective_status_reason: ObjectiveStatusReasonType!
  "Indicates the degree to which the a given control is implemented."
  implementation_status: ImplementationStatus 
}


"Defines an alias for the types of targets"
union Target = ControlStatement | ControlObjective

"Identifies the type of the target"
enum TargetType {
  "Indicates the target is a reference to a control statement identifier within a control."
  statement_id
  "Indicates the target is a reference to a control objective identifier within a control."
  objective_id
}

