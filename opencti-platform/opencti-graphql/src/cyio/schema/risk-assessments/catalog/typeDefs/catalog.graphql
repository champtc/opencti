# declares the query entry-points for this type
extend type Query {
  controlCatalog(id: ID = "22f2ad37-4f07-5182-bf4e-59ea197a73dc"): ControlCatalog  @hasPermission(resources:"ControlCatalog:view")
  controlCatalogs(
    first: Int
    offset: Int
    orderedBy: ControlCatalogOrdering
    orderMode: OrderingMode
    filters: [ControlCatalogFiltering]
    filterMode: FilterMode
    search: String
  ): ControlCatalogConnection  @hasPermission(resources:"ControlCatalog:view")
  controlGroup(id: ID!): ControlGroup  @hasPermission(resources:"Control:view")
  controlGroups(
    first: Int
    offset: Int
    orderedBy: ControlGroupOrdering
    orderMode: OrderingMode
    filters: [ControlGroupFiltering]
    filterMode: FilterMode
    search: String
  ): ControlGroupConnection  @hasPermission(resources:"ControlCatalog:view")
}

# =========== declares the mutation entry-points for this type ====================
extend type Mutation {
  # Catalog
  createControlCatalog(input: ControlCatalogInput!): ControlCatalog @hasPermission(resources: "Control:update")
  deleteControlCatalog(id: ID!): ID @hasPermission(resources: "Control:delete")
  editControlCatalog(id: ID!, input: [EditInput]!, commitMessage: String): ControlCatalog @hasPermission(resources: "Control:update")
  attachToControlCatalog(id: ID!, field: String!, entityId: ID!): Boolean @hasPermission(resources: "Control:update")
  detachFromControlCatalog(id: ID!, field: String!, entityId: ID!): Boolean @hasPermission(resources: "Control:update")
  # Group
  createControlGroup(input: ControlGroupInput!): ControlGroup @hasPermission(resources: "Control:update")
  deleteControlGroup(id: ID!): ID @hasPermission(resources: "Control:delete")
  editControlGroup(id: ID!, input: [EditInput]!, commitMessage: String): ControlGroup @hasPermission(resources: "Control:update")
  attachToControlGroup(id: ID!, field: String!, entityId: ID!): Boolean @hasPermission(resources: "Control:update")
  detachFromControlGroup(id: ID!, field: String!, entityId: ID!): Boolean @hasPermission(resources: "Control:update")
}

# ================== Types ==============
"""
ControlCatalog model provides a structured representation of control information.
"""
type ControlCatalog implements BasicObject & LifecycleObject & OscalModel {
  # BasicObject
  "Uniquely identifies this object."
  id: ID!
  "Identifies the identifier defined by the standard."
  standard_id: String!
  "Identifies the type of the Object."
  entity_type: String!
  "Identifies the parent types of this object."
  parent_types: [String]!
  # LifecycleObject
  "Indicates the date and time at which the object was originally created."
  created: Timestamp
  "Indicates the date and time that this particular version of the object was last modified."
  modified: Timestamp
  # Metadata
  "Identifies the name given to the document."
  name: String!
  "Identifies the date and time the document was published."
  published: Timestamp
  "Identifies the date and time the document as last modified."
  last_modified: Timestamp
  "Identifies the current version of the document."
  version: String!
  "Identifies the OSCAL model version the document was authored against."
  oscal_version: String!
  "Identifies a list of revisions to the containing document."
  revisions: [Revision]
  "Identifies references to previous versions of this document."
  document_ids: [ID]
  "Provides information about the containing document, and defines concepts that are shared across the document."
  metadata: OscalMetadata
  # Catalog
  "Identifies the set of parameters used to support the dynamic assignment of value(s) in a control."
  params: ControlParameterConnection
  "Identifies a structured information object representing a security or privacy control. Each security or privacy control within the Catalog is defined by a distinct control instance."
  controls: ControlConnection
  "Identifies a group of controls, or of groups of controls."
  groups: ControlGroupConnection
  # Back-matter
  "Identifies one or more Resources that are associated with this POAM."
  resources(first: Int, offset: Int): OscalResourceConnection
}
input ControlCatalogInput {
  # Metadata
  "Identifies the name given to the document."
  name: String!
  "Identifies the date and time the document was published."
  published: Timestamp
  "Identifies the date and time the document as last modified."
  last_modified: Timestamp
  "Identifies the current version of the document."
  version: String!
  "Identifies the OSCAL model version the document was authored against."
  oscal_version: String!
  "Identifies a list of revisions to the containing document."
  revisions: [RevisionAddInput]
  "Identifies references to previous versions of this document."
  document_ids: [ID]
}

# Pagination Types
type ControlCatalogConnection {
  pageInfo: PageInfo!
  edges: [ControlCatalogEdge]
}
type ControlCatalogEdge {
  cursor: String!
  node: ControlCatalog!
}
# Filtering Types
input ControlCatalogFiltering {
  key: ControlCatalogFilter!
  values: [String]!
  operator: String
  filterMode: FilterMode
}
enum ControlCatalogFilter {
  "Created"
  created
  "Modified"
  modified
  "Label"
  label_name
  "Name"
  name
  "id"
  id
  "Published"
  published
}
# Ordering Enum
enum ControlCatalogOrdering {
  "Created"
  created
  "Modified"
  modified
  "Label"
  label_name
  "Name"
  name
  "id"
  id
  "Published"
  published
}

"""
ControlGroup
"""
type ControlGroup implements BasicObject & LifecycleObject {
  # BasicObject
  "Uniquely identifies this object."
  id: ID!
  "Identifies the identifier defined by the standard."
  standard_id: String!
  "Identifies the type of the Object."
  entity_type: String!
  "Identifies the parent types of this object."
  parent_types: [String]!
  # LifecycleObject
  "Indicates the date and time at which the object was originally created."
  created: Timestamp
  "Indicates the date and time that this particular version of the object was last modified."
  modified: Timestamp
  # Group
  "Identifies one or more attributes, characteristics, or qualities of the containing object expressed as a namespace qualified name/value pair. The value of a property is a simple scalar value, which may be expressed as a list of values."
  props: [Property]
  "Specifies a textual label that provides a sub-type or characterization of the control."
  class: String
  "Identifies a name given to the control, which may be used by a tool for display and navigation."
  name: String!
  "Identifies values in a control that are dynamically assigned."
  params: [ControlParameter]
  "Identifies a list of references to a local or remote resource."
  links: [Link]
  "Identifies a partition of a control's definition or a child of another part."
  parts: [OscalPart]
  "Identifies sub-controls"
  controls: [Control]
  # Control extension fields
  "Identifies an alternate or aliased identifier for the parent context."
  alt_identifier: String
  "Identifies the status of a control. For example, a value of 'withdrawn' can indicate that the control has been withdrawn and should no longer be used."
  status: ControlStatus
}
input ControlGroupInput {
  "Specifies a textual label that provides a sub-type or characterization of the control."
  class: String
  "Identifies a name given to the control, which may be used by a tool for display and navigation."
  name: String!
  "Identifies values in a control that are dynamically assigned."
  params: [ControlParameterInput]
  # Control extension fields
  "Identifies an alternate or aliased identifier for the parent context."
  alt_identifier: String
  "Identifies the status of a control. For example, a value of 'withdrawn' can indicate that the control has been withdrawn and should no longer be used."
  status: ControlStatus
}

# Pagination Types
type ControlGroupConnection {
  pageInfo: PageInfo!
  edges: [ControlGroupEdge]
}
type ControlGroupEdge {
  cursor: String!
  node: ControlGroup!
}
# Filtering Types
input ControlGroupFiltering {
  key: ControlGroupFilter!
  values: [String]!
  operator: String
  filterMode: FilterMode
}
enum ControlGroupFilter {
  "Created"
  created
  "Modified"
  modified
  "Label"
  label_name
  "id"
  id
  "Class"
  class
  "Name"
  name
}
# Ordering Enum
enum ControlGroupOrdering {
  "Created"
  created
  "Modified"
  modified
  "Label"
  label_name
  "id"
  id
  "Class"
  class
  "Name"
  name
}
