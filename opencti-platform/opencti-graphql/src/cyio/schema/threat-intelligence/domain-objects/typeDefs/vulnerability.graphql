extend type Query {
  vulnerabilities(
    first: Int
    offset: Int
    orderedBy: VulnerabilityOrdering
    orderMode: OrderingMode
    filters: [VulnerabilityFiltering]
    filterMode: FilterMode
    search: String
  ): VulnerabilityConnection @hasPermission(resources: "Context:view")
  vulnerability(id: ID!): Vulnerability @hasPermission(resources: "Context:view")
}

extend type Mutation {
  createVulnerability(input: VulnerabilityInput!): Vulnerability @hasPermission(resources: "Context:update")
  deleteVulnerability(id: ID!): ID @hasPermission(resources: "Context:delete")
  deleteVulnerabilities(ids: [ID!]!): [ID] @hasPermission(resources: "Context:delete")
  editVulnerability(id: ID!, input: [EditInput]!, commitMessage: String): Vulnerability @hasPermission(resources: "Context:update")
  #
  attachToVulnerability(id: ID!, field: String!, entityId: ID!): Boolean @hasPermission(resources: "Context:update")
  detachFromVulnerability(id: ID!, field: String!, entityId: ID!): Boolean @hasPermission(resources: "Context:update")
}

type Vulnerability implements BasicObject & LifecycleObject & CoreObject {
  # BasicObject
  "Uniquely identifies this object."
  id: ID!
  "Identifies the identifier defined by the standard."
  standard_id: String!
  "Identifies the type of the Object."
  entity_type: String!
  "Identifies the parent types of this object."
  parent_types: [String]!
  # LifecycleObject
  "Identities the date and time at which the object was originally created."
  created: Timestamp
  "Identifies the date and time at which the object was last modified."
  modified: Timestamp
  # Core Object
  "Identifies a set of terms used to describe this object. The terms are user-defined or trust-group defined."
  labels: [CyioLabel]
  "Identifies a list of CyioExternalReferences, each of which refers to information external to the data model. This property is used to provide one or more URLs, descriptions, or IDs to records in other systems."
  external_references: [CyioExternalReference]
  "Identifies one or more references to additional commentary on the Model."
  notes: [CyioNote]
  # "Identifies an assessment of the correctness of the information in an Object produced by a different entity."
  # opinions(first: Int): [CyioOpinions]
  "Identifies one or more relationships to other entities."
  relationships(
    first: Int
    offset: Int
    orderedBy: OscalRelationshipsOrdering
    orderMode: OrderingMode
    filters: [OscalRelationshipsFiltering]
    filterMode: FilterMode
    search: String
  ): CyioRelationshipConnection
  "Identifies a  label or descriptor that is tied to a sensitivity or classification marking system."
  object_markings: [DataMarking]
  # Vulnerability
  "Indicates the unique identifier assigned to the vulnerability."
  vulnerability_id: String
  "Indicates a 1-256 character title, headline, or a brief phrase summarizing the vulnerability. Eg., Buffer overflow in Example Soft."
  title: String
  "Indicates a 1-4096 characters of text in a particular language with optional alternate markup or formatted representation (e.g., Markdown)."
  description: String
  "Indicates the UUID for the organization to which the vulnerability identifier was originally assigned. This UUID can be used to lookup the organization record in the user registry service."
  assigner_org_id: UUID
  "Indicates a 2-32 character name that can be used to complement an organization's UUID."
  assigner_short_name: String
  "Indicates the provider's organizational UUID."
  provider_org_id: UUID
  "Indicates a 2-32 character name that can be used to complement an provider's UUID."
  provider_short_name: String
  "Indicates the user that requested the vulnerability identifier."
  requester_user_id: UUID
  "Indicates the date/time the record was last updated."
  date_updated: Timestamp
  "Indicates the system of record causes this to start at 1, and increment by 1 each time a submission from a data provider changes this CVE Record. The incremented value moves to the Rejected schema upon a PUBLISHED->REJECTED transition, and moves to the Published schema upon a REJECTED->PUBLISHED transition."
  serial: PositiveInt
  "Indicates date/time this vulnerability ID was reserved in the CVE automation workgroup services system. Disclaimer: This date reflects when the CVE ID was reserved, and does not necessarily indicate when this vulnerability was discovered, shared with the affected vendor, publicly disclosed, or updated in the list."
  date_reserved: Timestamp
  "Indicates the date/time the Vulnerability Record was first published in the list."
  date_published: Timestamp
  "Indicates date/time the Vulnerability Record was submitted."
  date_submitted: Timestamp
  "Indicates the date/time this vulnerability ID was associated with a vulnerability by a CNA."
  date_assigned: Timestamp
  "Indicates the date/time the vulnerability was disclosed publicly."
  date_public_disclosure: Timestamp
  "Indicates the state of vulnerability - PUBLISHED, REJECTED."
  state: State
  "Indicates the list of affected products."
  affected: [AffectedProduct]
  "Indicates the list of information for each problem type."
  problem_types: [ProblemType]
  "Indicates the collection of impacts of this vulnerability."
  impacts: [ImpactType]
  "Indicates the collection of impact scores with attribution."
  metrics: [MetricType]
  "Indicates the configurations required for exploiting this vulnerability."
  configurations: [String]
  "Indicates workarounds and mitigations for this vulnerability."
  workarounds: [String]
  "Indicates information about solutions or remediations available for this vulnerability."
  solutions: [String]
  "Indicates the information about exploits of the vulnerability."
  exploits: [String]
  "Indicates timeline information for significant events about this vulnerability or changes to the vulnerability record."
  timeline: [TimelineEntry]
  "Indicates statements acknowledging specific people, organizations, or tools recognizing the work done in researching, discovering, remediating or helping with activities related to this vulnerability."
  credits: [Credit]
  "Indicates the source information (who discovered it, who researched it, etc.) and optionally a chain of CNA information (e.g. the originating CNA and subsequent parent CNAs who have processed it before it arrives at the MITRE root).\n Must contain: IF this is in the root level it MUST contain a CNA_chain entry, IF this source entry is NOT in the root (e.g. it is part of a vendor statement) then it must contain at least one type of data entry."
  source: [VulnerabilitySource]
  "Indicates Tags provided by a CNA describing the Vulnerability Record."
  cna_tags: [CNATag]
  "Indicates the list of taxonomy items related to the vulnerability."
  taxonomy_mappings: [TaxonomyMapEntry]
  "Indicates the date the vulnerability was added to the catalog."
  cisa_exploit_add: Timestamp
  "Indicates the date the required action is due."
  cisa_action_due: Timestamp
  "Indicates the actions required to address the vulnerability."
  cisa_required_action: String
  "Indicates the name of the vulnerability."
  cisa_vulnerability_name: String
}

input VulnerabilityInput {
  "Indicates the unique identifier assigned to the vulnerability."
  vulnerability_id: String
  "Indicates a 1-256 character title, headline, or a brief phrase summarizing the vulnerability. Eg., Buffer overflow in Example Soft."
  title: String
  "Indicates a 1-4096 characters of text in a particular language with optional alternate markup or formatted representation (e.g., Markdown)."
  description: String
  "Indicates the UUID for the organization to which the vulnerability identifier was originally assigned. This UUID can be used to lookup the organization record in the user registry service."
  assigner_org_id: UUID
  "Indicates a 2-32 character name that can be used to complement an organization's UUID."
  assigner_short_name: String
  "Indicates the provider's organizational UUID."
  provider_org_id: UUID
  "Indicates a 2-32 character name that can be used to complement an provider's UUID."
  provider_short_name: String
  "Indicates the user that requested the vulnerability identifier."
  requester_user_id: UUID
  "Indicates the date/time the record was last updated."
  date_updated: Timestamp
  "Indicates the system of record causes this to start at 1, and increment by 1 each time a submission from a data provider changes this CVE Record. The incremented value moves to the Rejected schema upon a PUBLISHED->REJECTED transition, and moves to the Published schema upon a REJECTED->PUBLISHED transition."
  serial: PositiveInt
  "Indicates date/time this vulnerability ID was reserved in the CVE automation workgroup services system. Disclaimer: This date reflects when the CVE ID was reserved, and does not necessarily indicate when this vulnerability was discovered, shared with the affected vendor, publicly disclosed, or updated in the list."
  date_reserved: Timestamp
  "Indicates the date/time the Vulnerability Record was first published in the list."
  date_published: Timestamp
  "Indicates date/time the Vulnerability Record was submitted."
  date_submitted: Timestamp
  "Indicates the date/time this vulnerability ID was associated with a vulnerability by a CNA."
  date_assigned: Timestamp
  "Indicates the date/time the vulnerability was disclosed publicly."
  date_public_disclosure: Timestamp
  "Indicates the state of vulnerability - PUBLISHED, REJECTED."
  state: State
  # "Indicates the list of affected products."
  # affected: [AffectedProduct]
  # "Indicates the list of information for each problem type."
  # problem_types: [ProblemType]
  "Indicates the collection of impacts of this vulnerability."
  impacts: [ImpactTypeInput]
  # "Indicates the collection of impact scores with attribution."
  # metrics: [MetricType]
  "Indicates the configurations required for exploiting this vulnerability."
  configurations: [String]
  "Indicates workarounds and mitigations for this vulnerability."
  workarounds: [String]
  "Indicates information about solutions or remediations available for this vulnerability."
  solutions: [String]
  "Indicates the information about exploits of the vulnerability."
  exploits: [String]
  "Indicates timeline information for significant events about this vulnerability or changes to the vulnerability record."
  timeline: [TimelineEntryInput]
  "Indicates statements acknowledging specific people, organizations, or tools recognizing the work done in researching, discovering, remediating or helping with activities related to this vulnerability."
  credits: [CreditInput]
  "Indicates the source information (who discovered it, who researched it, etc.) and optionally a chain of CNA information (e.g. the originating CNA and subsequent parent CNAs who have processed it before it arrives at the MITRE root).\n Must contain: IF this is in the root level it MUST contain a CNA_chain entry, IF this source entry is NOT in the root (e.g. it is part of a vendor statement) then it must contain at least one type of data entry."
  source: [VulnerabilitySourceInput]
  "Indicates Tags provided by a CNA describing the Vulnerability Record."
  cna_tags: [CNATag]
  # "Indicates the list of taxonomy items related to the vulnerability."
  # taxonomy_mappings: [TaxonomyMapEntry]
  "Indicates the date the vulnerability was added to the catalog."
  cisa_exploit_add: Timestamp
  "Indicates the date the required action is due."
  cisa_action_due: Timestamp
  "Indicates the actions required to address the vulnerability."
  cisa_required_action: String
  "Indicates the name of the vulnerability."
  cisa_vulnerability_name: String
}

# Vulnerability Connection
type VulnerabilityConnection {
  pageInfo: PageInfo!
  edges: [VulnerabilityEdge]
}
type VulnerabilityEdge {
  cursor: String,
  node: Vulnerability!
}

# slicing types
"Defines the list of fields that can be used to order by for a Vulnerability"
enum VulnerabilityOrdering {
    "Created"
    created
    "Modified"
    modified
    "Name"
    name
    "Label"
    label_name
}
# Filtering types
input VulnerabilityFiltering {
  key: VulnerabilityFilter!
  values: [String]!
  operator: String
  filterMode: FilterMode
}

"Defines the list of fields that can be filtered upon for Vulnerability."
enum VulnerabilityFilter {
    "Created"
    created
    "Modified"
    modified
    "Name"
    name
    "Label"
    label_name
}
## --------


type AffectedProduct implements ComplexDatatype {
  # ComplexDatatype
  "Uniquely identifies this object."
  id: ID!
  "Identifies the type of the Object."
  entity_type: String!
  # Affected Product
  "Indicates then name of the organization, project, community, individual, or user that created or maintains this product or hosted service. Can be 'N/A' if none of those apply. When collectionURL and packageName are used, this field may optionally represent the user or account within the package collection associated with the package."
  vendor: String
  "Indicates then name of the affected product."
  product: String
  "Indicates URL identifying a package collection (determines the meaning of packageName)."
  collection_url: URL
  "Indicates the name or identifier of the affected software package as used in the package collection."
  package_name: String
  "Indicates affected products defined by CPE. This is an array of CPE values (vulnerable and not), we use an array so that we can make multiple statements about the same version and they are separate (if we used a JSON object we'd essentially be keying on the CPE name and they would have to overlap). Also, this allows things like cveDataVersion or cveDescription to be applied directly to the product entry. This also allows more complex statements such as \"Product X between versions 10.2 and 10.8\" to be put in a machine-readable format. As well since multiple statements can be used multiple branches of the same product can be defined here."
  cpes: [String]
  "Indicates list of the affected components, features, modules, sub-components, sub-products, APIs, commands, utilities, programs, or functionalities (optional)."
  modules: [String]
  "Indicates a list of the affected source code files (optional)."
  program_files: [String]
  "Indicates a list of the affected source code functions, methods, subroutines, or procedures (optional)."
  program_routines: [String]
  "Indicates the list of specific platforms if the vulnerability is only relevant in the context of these platforms (optional). Platforms may include execution environments, operating systems, virtualization technologies, hardware models, or computing architectures. The lack of this field or an empty array implies that the other fields are applicable to all relevant platforms."
  platforms: [String]
  "Indicates the URL of the source code repository, for informational purposes and/or to resolve git hash version ranges."
  repo: URL
  "Indicates the default status for versions that are not otherwise listed in the versions list. If not specified, defaultStatus defaults to 'unknown'. Versions or defaultStatus may be omitted, but not both."
  default_status: AffectedStatus
  "Indicates the Set of product versions or version ranges related to the vulnerability. Versions or defaultStatus may be omitted, but not both."
  versions: [VersionSpec]
}

input AffectedProductInput {
  # Affected Product
  "Indicates then name of the organization, project, community, individual, or user that created or maintains this product or hosted service. Can be 'N/A' if none of those apply. When collectionURL and packageName are used, this field may optionally represent the user or account within the package collection associated with the package."
  vendor: String
  "Indicates then name of the affected product."
  product: String
  "Indicates URL identifying a package collection (determines the meaning of packageName)."
  collection_url: URL
  "Indicates the name or identifier of the affected software package as used in the package collection."
  package_name: String
  "Indicates affected products defined by CPE. This is an array of CPE values (vulnerable and not), we use an array so that we can make multiple statements about the same version and they are separate (if we used a JSON object we'd essentially be keying on the CPE name and they would have to overlap). Also, this allows things like cveDataVersion or cveDescription to be applied directly to the product entry. This also allows more complex statements such as \"Product X between versions 10.2 and 10.8\" to be put in a machine-readable format. As well since multiple statements can be used multiple branches of the same product can be defined here."
  cpes: [String]
  "Indicates list of the affected components, features, modules, sub-components, sub-products, APIs, commands, utilities, programs, or functionalities (optional)."
  modules: [String]
  "Indicates a list of the affected source code files (optional)."
  program_files: [String]
  "Indicates a list of the affected source code functions, methods, subroutines, or procedures (optional)."
  program_routines: [String]
  "Indicates the list of specific platforms if the vulnerability is only relevant in the context of these platforms (optional). Platforms may include execution environments, operating systems, virtualization technologies, hardware models, or computing architectures. The lack of this field or an empty array implies that the other fields are applicable to all relevant platforms."
  platforms: [String]
  "Indicates the URL of the source code repository, for informational purposes and/or to resolve git hash version ranges."
  repo: URL
  "Indicates the default status for versions that are not otherwise listed in the versions list. If not specified, defaultStatus defaults to 'unknown'. Versions or defaultStatus may be omitted, but not both."
  default_status: AffectedStatus
  "Indicates the Set of product versions or version ranges related to the vulnerability. Versions or defaultStatus may be omitted, but not both."
  versions: [VersionSpecInput]
}

type Credit implements ComplexDatatype {
  # ComplexDatatype
  "Uniquely identifies this object."
  id: ID!
  "Identifies the type of the Object."
  entity_type: String!
  # Credit
  "Indicates the name of the entity being given credit."
  credit_name: String
  "Indicates the UUID of the user being credited if present in the CVE User Registry (optional). This UUID can be used to lookup the user record in the user registry service."
  user_id: UUID
  "Indicates the Type or role of the entity being credited (optional). finder: identifies the vulnerability.\nreporter: notifies the vendor of the vulnerability to a CNA.\nanalyst: validates the vulnerability to ensure accuracy or severity.\ncoordinator: facilitates the coordinated response process.\nremediation developer: prepares a code change or other remediation plans.\nremediation reviewer: reviews vulnerability remediation plans or code changes for effectiveness and completeness.\nremediation verifier: tests and verifies the vulnerability or its remediation.\ntool: names of tools used in vulnerability discovery or identification.\nsponsor: supports the vulnerability identification or remediation activities."
  credit_type: CreditType
}

input CreditInput {
  # Credit
  "Indicates the name of the entity being given credit."
  credit_name: String
  "Indicates the UUID of the user being credited if present in the CVE User Registry (optional). This UUID can be used to lookup the user record in the user registry service."
  user_id: UUID
  "Indicates the Type or role of the entity being credited (optional). finder: identifies the vulnerability.\nreporter: notifies the vendor of the vulnerability to a CNA.\nanalyst: validates the vulnerability to ensure accuracy or severity.\ncoordinator: facilitates the coordinated response process.\nremediation developer: prepares a code change or other remediation plans.\nremediation reviewer: reviews vulnerability remediation plans or code changes for effectiveness and completeness.\nremediation verifier: tests and verifies the vulnerability or its remediation.\ntool: names of tools used in vulnerability discovery or identification.\nsponsor: supports the vulnerability identification or remediation activities."
  credit_type: CreditType
}

type ImpactType implements ComplexDatatype {
  # ComplexDatatype
  "Uniquely identifies this object."
  id: ID!
  "Identifies the type of the Object."
  entity_type: String!
  # Impact Type
  "Indicates the CAPEC ID that best relates to this impact."
  capec_id: String
  "Indicates a 1-4096 characters of text in a particular language with optional alternate markup or formatted representation (e.g., Markdown)."
  description: String
}

input ImpactTypeInput {
  # Impact Type
  "Indicates the CAPEC ID that best relates to this impact."
  capec_id: String
  "Indicates a 1-4096 characters of text in a particular language with optional alternate markup or formatted representation (e.g., Markdown)."
  description: String
}

type MetricType implements ComplexDatatype {
  # ComplexDatatype
  "Uniquely identifies this object."
  id: ID!
  "Identifies the type of the Object."
  entity_type: String!
  # MetricType
  "Indicates the name of the scoring format. This provides a bit of future proofing. Additional properties are not prohibited, so this will support the inclusion of proprietary formats. It also provides an easy future conversion mechanism when future score formats become part of the schema. example: cvssV44, format = 'cvssV44', other = cvssV4_4 JSON object. In the future, the other properties can be converted to score properties when they become part of the schema."
  format: String
  "Indicates description of the scenarios this metrics object applies to. If no specific scenario is given, GENERAL is used as the default and applies when no more specific metric matches."
  scenarios: [String]
  "Indicates the impact scoring of the vulnerability in CVSS V4.0 format."
  cvssV4_0: CVSSv4
  "Indicates the impact scoring of the vulnerability in CVSS V3_1 format."
  cvssV3_1: CVSSv3
  "Indicates the impact scoring of the vulnerability in CVSS V3.0 format."
  cvss3_0: CVSSv3
  "Indicates the impact scoring of the vulnerability in CVSS V2.0 format."
  cvssV2_0: CVSSv2
  "Indicates a non-standard impact description, may be prose or JSON block."
  other: UnknownMetricType
}

type ProblemType implements ComplexDatatype {
  # ComplexDatatype
  "Uniquely identifies this object."
  id: ID!
  "Identifies the type of the Object."
  entity_type: String!
  # Problem Type
  "Indicates a 1-4096 characters of text in a particular language with optional alternate markup or formatted representation (e.g., Markdown)."
  description: String
  "Indicates the CWE ID of the CWE that best describes this problemType entry."
  cwe_id: String
  "Indicates the problem type source, text, OWASP, CWE, etc."
  type_source: String
  "Indicates a set of reference data in the form of URLs or file objects (uuencoded and embedded within the JSON file, exact format to be decided, e.g. we may require a compressed format so the objects require unpacking before they are \"dangerous\")."
  references: [CyioExternalReference]
}

type TaxonomyMapEntry implements ComplexDatatype {
  # ComplexDatatype
  "Uniquely identifies this object."
  id: ID!
  "Identifies the type of the Object."
  entity_type: String!
  # Taxonomy Map Entry
  "Indicates the name of the taxonomy."
  taxonomy_name: String
  "taxonomy_version"
  taxonomy_version: String
  "Indicates the list of relationships to the taxonomy for the vulnerability.  Relationships can be between the taxonomy and the vulnerability or two taxonomy items."
  taxonomy_relationships: Relationship
}

type TimelineEntry implements ComplexDatatype {
  # ComplexDatatype
  "Uniquely identifies this object."
  id: ID!
  "Identifies the type of the Object."
  entity_type: String!
  # Timeline Entry
  "Indicates the timestamp representing when the event in the timeline occurred. The timestamp format is based on RFC3339 and ISO ISO8601, with an optional timezone. yyyy-MM-ddTHH:mm:ssZZZZ - if the timezone offset is not given, GMT (0000) is assumed."
  timestamp: Timestamp
  "Indicates the summary of the event."
  event_summary: String
}

input TimelineEntryInput {
  # Timeline Entry
  "Indicates the timestamp representing when the event in the timeline occurred. The timestamp format is based on RFC3339 and ISO ISO8601, with an optional timezone. yyyy-MM-ddTHH:mm:ssZZZZ - if the timezone offset is not given, GMT (0000) is assumed."
  timestamp: Timestamp
  "Indicates the summary of the event."
  event_summary: String
}

type UnknownMetricType implements ComplexDatatype {
  # ComplexDatatype
  "Uniquely identifies this object."
  id: ID!
  "Identifies the type of the Object."
  entity_type: String!
  # Unknown Metric
  "Indicates the name of the non-standard impact metrics format used."
  metric_type: String
  "Indicates a JSON object, in string form, not covered by another metrics format."
  content: String
}

type VersionSpec implements ComplexDatatype {
  # ComplexDatatype
  "Uniquely identifies this object."
  id: ID!
  "Identifies the type of the Object."
  entity_type: String!
  # VersionSpec
  "Indicates the single version being described, or the version at the start of the range. By convention, typically 0 denotes the earliest possible version."
  version: String
  "Indicates the vulnerability status for the version or range of versions. For a range, the status may be refined by the 'changes' list."
  status: AffectedStatus
  "Indicates the version numbering system used for specifying the range. This defines the exact semantics of the comparison (less-than) operation on versions, which is required to understand the range itself. 'Custom' indicates that the version type is unspecified and should be avoided whenever possible. It is included primarily for use in conversion of older data files."
  version_type: String
  "Indicates the non-inclusive upper limit of the range. This is the least version NOT in the range. The usual version syntax is expanded to allow a pattern to end in an asterisk `(*)`, indicating an arbitrarily large number in the version ordering. For example, `{version: 1.0 lessThan: 1.*}` would describe the entire 1.X branch for most range kinds, and `{version: 2.0, lessThan: *}` describes all versions starting at 2.0, including 3.0, 5.1, and so on. Only one of lessThan and lessThanOrEqual should be specified."
  less_than: String
  "Indicates the inclusive upper limit of the range. This is the greatest version contained in the range. Only one of lessThan and lessThanOrEqual should be specified. For example, `{version: 1.0, lessThanOrEqual: 1.3}` covers all versions from 1.0 up to and including 1.3."
  less_than_or_equal: String
  "Indicates the version at which a status change occurs."
  at: String
}

input VersionSpecInput {
  # VersionSpec
  "Indicates the single version being described, or the version at the start of the range. By convention, typically 0 denotes the earliest possible version."
  version: String
  "Indicates the vulnerability status for the version or range of versions. For a range, the status may be refined by the 'changes' list."
  status: AffectedStatus
  "Indicates the version numbering system used for specifying the range. This defines the exact semantics of the comparison (less-than) operation on versions, which is required to understand the range itself. 'Custom' indicates that the version type is unspecified and should be avoided whenever possible. It is included primarily for use in conversion of older data files."
  version_type: String
  "Indicates the non-inclusive upper limit of the range. This is the least version NOT in the range. The usual version syntax is expanded to allow a pattern to end in an asterisk `(*)`, indicating an arbitrarily large number in the version ordering. For example, `{version: 1.0 lessThan: 1.*}` would describe the entire 1.X branch for most range kinds, and `{version: 2.0, lessThan: *}` describes all versions starting at 2.0, including 3.0, 5.1, and so on. Only one of lessThan and lessThanOrEqual should be specified."
  less_than: String
  "Indicates the inclusive upper limit of the range. This is the greatest version contained in the range. Only one of lessThan and lessThanOrEqual should be specified. For example, `{version: 1.0, lessThanOrEqual: 1.3}` covers all versions from 1.0 up to and including 1.3."
  less_than_or_equal: String
  "Indicates the version at which a status change occurs."
  at: String
}

type VulnerabilitySource implements ComplexDatatype {
  # ComplexDatatype
  "Uniquely identifies this object."
  id: ID!
  "Identifies the type of the Object."
  entity_type: String!
  #Vulnerability Source
  "This is the source information (who discovered it, who researched it, etc.) and optionally a chain of CNA information (e.g. the originating CNA and subsequent parent CNAs who have processed it before it arrives at the MITRE root).\n Must contain: IF this is in the root level it MUST contain a CNA_chain entry, IF this source entry is NOT in the root (e.g. it is part of a vendor statement) then it must contain at least one type of data entry."
  description: String
}

input VulnerabilitySourceInput {
  "Identifies the type of the Object."
  entity_type: String!
  #Vulnerability Source
  "This is the source information (who discovered it, who researched it, etc.) and optionally a chain of CNA information (e.g. the originating CNA and subsequent parent CNAs who have processed it before it arrives at the MITRE root).\n Must contain: IF this is in the root level it MUST contain a CNA_chain entry, IF this source entry is NOT in the root (e.g. it is part of a vendor statement) then it must contain at least one type of data entry."
  description: String
}


"""
AffectedStatus

The vulnerability status of a given version or range of versions of a product. The statuses 'affected' and 
'unaffected' indicate that the version is affected or unaffected by the vulnerability. The status 'unknown' 
indicates that it is unknown or unspecified whether the given version is affected. There can be many reasons 
for an 'unknown' status, including that an investigation has not been undertaken or that a vendor has not 
disclosed the status.
"""
enum AffectedStatus {
  "Indicates that the version is affected by the vulnerability."
  affected
  "Indicates that the version is unaffected by the vulnerability."
  unaffected
  "Indicates that it is unknown or unspecified whether the given version is affected."
  unknown
}

"""
Tags provided by a CNA describing the CVE Record.

  * exclusively-hosted-service: 
    All known software and/or hardware affected by this CVE Record is known to 
    exist only in the affected hosted service. If the vulnerability affects both hosted and on-prem software 
    and/or hardware, then the tag should not be used.

  * unsupported-when-assigned: 
    Used by the assigning CNA to indicate that when a request for a 
    CVE assignment was received, the product was already end-of-life (EOL) or a product or specific 
    version was deemed not to be supported by the vendor. This tag should only be applied to a CVE 
    Record when all affected products or version lines referenced in the CVE-Record are EOL.

  * disputed: 
    When one party disagrees with another party's assertion that a particular issue in software 
    is a vulnerability, a CVE Record assigned to that issue may be tagged as being 'disputed'.
"""
enum CNATag {
  ""
  unsupported_when_assigned
  ""
  exclusively_hosted_service
  ""
  disputed
}

"""
CreditType 

Type or role of the entity being credited (optional). 
  - finder: identifies the vulnerability.
  - reporter: notifies the vendor of the vulnerability to a CNA.
  - analyst: validates the vulnerability to ensure accuracy or severity.
  - coordinator: facilitates the coordinated response process.
  - remediation developer: prepares a code change or other remediation plans.
  - remediation reviewer: reviews vulnerability remediation plans or code changes for effectiveness and completeness.
  - remediation verifier: tests and verifies the vulnerability or its remediation.
  - tool: names of tools used in vulnerability discovery or identification.
  - sponsor: supports the vulnerability identification or remediation activities.
"""
enum CreditType {
  "Identifies the vulnerability."
  finder
  "Notifies the vendor of the vulnerability to a CNA."
  reporter
  "Validates the vulnerability to ensure accuracy or severity."
  analyst
  "Facilitates the coordinated response process."
  coordinator
  "Prepares a code change or other remediation plans."
  remediation_developer
  "Reviews vulnerability remediation plans or code changes for effectiveness and completeness."
  remediation_reviewer
  "Tests and verifies the vulnerability or its remediation."
  remediation_verifier
  "Names of tools used in vulnerability discovery or identification."
  tool
  "Supports the vulnerability identification or remediation activities."
  sponsor
  "Other type of credit."
  other
}

