import {
  insertVulnerabilityQuery,
  selectVulnerabilityQuery,
  singularizeDescriptionBlockSchema,
  getReducer
} from '../schema/sparql/vulnerability.js';

export const createVulnerability = async (input, dbName, dataSources, select) => {
  // Need to escape contents, remove explicit newlines, and collapse multiple what spaces.
  if (input.title !== undefined ) {
    input.title = input.title.replace(/\s+/g, ' ')
                                        .replace(/\n/g, '\\n')
                                        .replace(/\"/g, '\\"')
                                        .replace(/\'/g, "\\'")
                                        .replace(/[\u2019\u2019]/g, "\\'")
                                        .replace(/[\u201C\u201D]/g, '\\"');
  }

  if (input.description !== undefined ) {
    input.description = input.description.replace(/\s+/g, ' ')
                                        .replace(/\n/g, '\\n')
                                        .replace(/\"/g, '\\"')
                                        .replace(/\'/g, "\\'")
                                        .replace(/[\u2019\u2019]/g, "\\'")
                                        .replace(/[\u201C\u201D]/g, '\\"');
  }
  
  // create vulnerabilitiy
  let response;
  let {iri, id, query} = insertVulnerabilityQuery(input);
  try {
    response = await dataSources.Stardog.create({
      dbName: dbName,
      sparqlQuery: query,
      queryId: "Create Vulnerability object"
      });
  } catch (e) {
    console.log(e)
    throw e
  }

  // retrieve the newly created Vulnerability to be returned
  const selectQuery = selectVulnerabilityQuery(id, select);
  let result;
  try {
    result = await dataSources.Stardog.queryById({
      dbName: dbName,
      sparqlQuery: selectQuery,
      queryId: "Select Vulnerability object",
      singularizeSchema: singularizeDescriptionBlockSchema
    });
  } catch (e) {
    console.log(e)
    throw e
  }
  if (result === undefined || result === null || result.length === 0) return null;
  const reducer = getReducer("VULNERABILITY");
  return reducer(result[0]);
};
