import { UserInputError } from 'apollo-server-errors';
import { compareValues, filterValues, updateQuery, checkIfValidUUID, validateEnumValue } from '../../utils.js';
import { selectObjectIriByIdQuery, sanitizeInputFields } from '../../global/global-utils.js';
import {
  insertVulnerabilityQuery,
  selectVulnerabilityQuery,
  singularizeVulnerabilitySchema,
  selectAllVulnerabilitiesQuery,
  deleteVulnerabilityQuery,
  vulnerabilityPredicateMap,
  generateVulnerabilityId,
  selectVulnerabilityQueryByIriQuery,
  attachToVulnerabilityQuery,
  detachFromVulnerabilityQuery,
  getReducer
} from '../schema/sparql/vulnerability.js';
import { createCVSSMetric, deleteCVSSMetricById } from './cvss.js';
import { createAffectedProduct, deleteAffectedProductById } from './affectedProduct.js';
import { createImpact, deleteImpactById } from './impact.js';
import { createProblemType, deleteProblemTypeById } from './problemType.js';
import { createTaxonomyEntry, deleteTaxonomyEntryById } from './taxonomyEntry.js';
import { createCredit, deleteCreditById } from './credit.js';

export const createVulnerability = async (input, dbName, dataSources, select) => {
  sanitizeInputFields(input)

  // check if a vulnerability with this same id exists
  let checkId = generateVulnerabilityId( input );
  // ensure the id is a valid UUID
  if (!checkIfValidUUID(checkId)) throw new UserInputError(`Invalid identifier: ${checkId}`);

  let selectQuery;
  let vul;
  selectQuery = selectVulnerabilityQuery(checkId, select);

  try {
    vul = await dataSources.Stardog.queryById({
      dbName: dbName,
      sparqlQuery: selectQuery,
      queryId: "Select Vulnerability object",
      singularizeSchema: singularizeVulnerabilitySchema
    });
  } catch (e) {
    console.log(e)
    throw e
  }

  if ( (vul != undefined && vul != null) && vul.length > 0) {
    throw new UserInputError(`Cannot create vulnerability entry as entity ${checkId} already exists`);
  }

  // Collect all the nested definitions and remove them from input array
  let nestedDefinitions = {
    'metrics': { values: input.metrics, props: {}, objectType: 'metrics', createFunction: createCVSSMetric },
    'affected': { values: input.affected, props: {}, objectType: 'affected-product', createFunction: createAffectedProduct },
    'impacts': { values: input.impacts, props: {}, objectType: 'impact-type', createFunction: createImpact },
    'problem_types': { values: input.problem_types, props: {}, objectType: 'problem-type', createFunction: createProblemType },
    'taxonomy_mappings': { values: input.taxonomy_mappings, props: {}, objectType: 'taxonmy-map-entry', createFunction: createTaxonomyEntry },
    'credits': { values: input.credits, props: {}, objectType: 'credit', createFunction: createCredit },
  };

	for (let [fieldName, fieldInfo] of Object.entries(nestedDefinitions)) {
    if (fieldInfo.values === undefined || fieldInfo.values === null) continue;
    if (!Array.isArray(fieldInfo.values)) fieldInfo.values = [fieldInfo.values];
    for( let fieldValue of fieldInfo.values) {
      for (let [key, value] of Object.entries(fieldValue)) {
        if (typeof value === 'string') {
          value = value.replace(/\s+/g, ' ')
                        .replace(/\n/g, '\\n')
                        .replace(/\"/g, '\\"')
                        .replace(/\'/g, "\\'")
                        .replace(/[\u2019\u2019]/g, "\\'")
                        .replace(/[\u201C\u201D]/g, '\\"');
        }
        if (value === undefined || value === null) continue;
        nestedDefinitions[fieldName]['props'][key] = value;
      }
    }
    if (input[fieldName]) delete input[fieldName];
  }

  // TODO: check if there are any object references

  // create vulnerabilitiy
  let response;
  let {iri, id, query} = insertVulnerabilityQuery(input);

  try {
    response = await dataSources.Stardog.create({
      dbName: dbName,
      sparqlQuery: query,
      queryId: "Create Vulnerability object"
      });
  } catch (e) {
    console.log(e)
    throw e
  }

  // Attach any nest definitions
  for (let [key, value] of Object.entries(nestedDefinitions)) {
		let itemName = value.objectType.replace(/-/g, ' ');
    if (Object.keys(value.props).length !== 0 ) {
      let item;
      try {
        let select = ['id','iri']
        item = await value.createFunction(value.props, dbName, dataSources, select);
      } catch (e) {
        console.log(e)
        throw e
      }

      // attach the definition to the new Vulnerability
      let attachQuery = attachToVulnerabilityQuery(id, key, item.iri );
      try {
        response = await dataSources.Stardog.create({
          dbName,
          sparqlQuery: attachQuery,
          queryId: `Attach ${itemName}`
          });
      } catch (e) {
        console.log(e)
        throw e
      }
    }
  }

  // retrieve the newly created Vulnerability to be returned
  selectQuery = selectVulnerabilityQuery(id, select);
  let result;
  
  try {
    result = await dataSources.Stardog.queryById({
      dbName: dbName,
      sparqlQuery: selectQuery,
      queryId: "Select Vulnerability object",
      singularizeSchema: singularizeVulnerabilitySchema
    });
  } catch (e) {
    console.log(e)
    throw e
  }

  if (result === undefined || result === null || result.length === 0) return null;
  
  const reducer = getReducer("VULNERABILITY");
  
  return reducer(result[0]); 
};

export const findVulnerabilityById = async (id, dbName, dataSources, select) => {
  // ensure the id is a valid UUID
  if (!checkIfValidUUID(id)) throw new UserInputError(`Invalid identifier: ${id}`);

  let iri = `<http://cyio.darklight.ai/vulnerability--${id}>`;
  return findVulnerabilityByIri(iri, dbName, dataSources, select);
};

export const findVulnerabilityByIri = async (iri, dbName, dataSources, select) => {
  if (!select.includes('id')) select.push('id');
  if (!select.includes('entity_type')) select.push('entity_type');
  
  const sparqlQuery = selectVulnerabilityQueryByIriQuery(iri, select);
  let response;
  try {
    response = await dataSources.Stardog.queryById({
      dbName,
      sparqlQuery,
      queryId: "Select Vulnerability",
      singularizeSchema: singularizeVulnerabilitySchema
    });
  } catch (e) {
    console.log(e)
    throw e
  }
  
  if (response === undefined || response === null || response.length === 0) return null;

  const reducer = getReducer("VULNERABILITY");
  return reducer(response[0]);
};

export const findAllVulnerabilities = async ( args, dbName, dataSources, select ) => {
  const sparqlQuery = selectAllVulnerabilitiesQuery(select, args);
  let response;
  
  try {
    response = await dataSources.Stardog.queryAll({
      dbName: dbName,
      sparqlQuery,
      queryId: "Select List of Vulnerabilities",
      singularizeSchema: singularizeVulnerabilitySchema
    });
  } catch (e) {
    console.log(e)
    throw e
  }

  // no results found
  if (response === undefined || response.length === 0) return null;

  // if no matching results, then return null
  if (Array.isArray(response) && response.length < 1) return null;

  const edges = [];
  const reducer = getReducer("VULNERABILITY");
  let skipCount = 0,filterCount = 0, resultCount = 0, limit, offset, limitSize, offsetSize;
  limitSize = limit = (args.first === undefined ? response.length : args.first) ;
  offsetSize = offset = (args.offset === undefined ? 0 : args.offset) ;

  let resultList ;

  if (args.orderedBy !== undefined ) {
    resultList = response.sort(compareValues(args.orderedBy, args.orderMode ));
  } else {
    resultList = response;
  }

  // return null if offset value beyond number of results items
  if (offset > resultList.length) return null;

  // for each result in the result set
  for (let resultItem of resultList) {
    // skip down past the offset
    if (offset) {
      offset--
      continue
    }

    // filter out non-matching entries if a filter is to be applied
    if ('filters' in args && args.filters != null && args.filters.length > 0) {
      if (!filterValues(resultItem, args.filters, args.filterMode) ) {
        continue
      }
      filterCount++;
    }

    // if haven't reached limit to be returned
    if (limit) {
      let edge = {
        cursor: resultItem.iri,
        node: reducer(resultItem),
      }
      edges.push(edge)
      limit--;
      if (limit === 0) break;
    }
  }

  // check if there is data to be returned
  if (edges.length === 0 ) return null;
  
  let hasNextPage = false, hasPreviousPage = false;
  resultCount = resultList.length - skipCount;
  
  if (edges.length < resultCount) {
    if (edges.length === limitSize && filterCount <= limitSize ) {
      hasNextPage = true;
      if (offsetSize > 0) hasPreviousPage = true;
    }
    if (edges.length <= limitSize) {
      if (filterCount !== edges.length) hasNextPage = true;
      if (filterCount > 0 && offsetSize > 0) hasPreviousPage = true;
    }
  }
  return {
    pageInfo: {
      startCursor: edges[0].cursor,
      endCursor: edges[edges.length-1].cursor,
      hasNextPage: (hasNextPage ),
      hasPreviousPage: (hasPreviousPage),
      globalCount: resultCount,
    },
    edges: edges,
  }
};

export const deleteVulnerabilityById = async ( id, dbName, dataSources ) => {
  let select = ['iri','id', 'metrics', 'affected', 'impacts', 'problem_types', 'taxonomy_mappings', 'credits'];
  
  let idArray = [];

  if (!Array.isArray(id)) {
    idArray = [id];
  } else {
    idArray = id;
  }

  let removedIds = []

  for (let itemId of idArray) {
    let response;

    if (!checkIfValidUUID(itemId)) throw new UserInputError(`Invalid identifier: ${itemId}`);  

    // check if object with id exists
    let sparqlQuery = selectVulnerabilityQuery(itemId, select);
    
    try {
      response = await dataSources.Stardog.queryById({
        dbName,
        sparqlQuery,
        queryId: "Select Vulnerability object",
        singularizeSchema: singularizeVulnerabilitySchema
      });
    } catch (e) {
      console.log(e)
      throw e
    }
    
    if (response === undefined || response.length === 0) throw new UserInputError(`Entity does not exist with ID ${itemId}`);
    let vul = response[0];

    let nestedReferences = {
      'metrics': { object_type: 'metrics', iris: vul.metrics, deleteFunction: deleteCVSSMetricById},
      'affected': { object_type: 'affected', iris: vul.affected, deleteFunction: deleteAffectedProductById },
      'impacts': { object_type: 'impacts', iris: vul.affected, deleteFunction: deleteImpactById },
      'problem_types': { object_type: 'problem_types', iris: vul.affected, deleteFunction: deleteProblemTypeById },
      'taxonomy_mappings': { object_type: 'taxonomy_mappings', iris: vul.affected, deleteFunction: deleteTaxonomyEntryById },
      'credits': { object_type: 'credits', iris: vul.affected, deleteFunction: deleteCreditById },
    };

    // delete any nested nodes
    for (let [fieldName, fieldInfo] of Object.entries(nestedReferences)) {
      if (fieldInfo.iris === undefined || fieldInfo.iris === null) continue;
      if (!Array.isArray(fieldInfo.iris)) fieldInfo.iris = [fieldInfo.iris];

      switch (fieldInfo.object_type) {
        case 'metrics':
          for( let cvssIri of fieldInfo.iris) {
            let result = await deleteCVSSMetricById(cvssIri, dbName, dataSources);
          }
        case 'affected':
          for( let affectedIri of fieldInfo.iris) {
            let result = await deleteAffectedProductById(affectedIri, dbName, dataSources);
          }
      }
    }

    sparqlQuery = deleteVulnerabilityQuery(itemId);
    
    try {
      response = await dataSources.Stardog.delete({
        dbName,
        sparqlQuery,
        queryId: "Delete Vulnerability"
      });
    } catch (e) {
      console.log(e)
      throw e
    }
    
    removedIds.push(itemId);
  }

  if (!Array.isArray(id)) return id;

  return removedIds;
};

export const editVulnerabilityById = async (id, input, dbName, dataSources, select, schema) => {
  if (!checkIfValidUUID(id)) throw new UserInputError(`Invalid identifier: ${id}`);  

  // make sure there is input data containing what is to be edited
  if (input === undefined || input.length === 0) throw new UserInputError(`No input data was supplied`);

  // WORKAROUND to remove immutable fields
  input = input.filter(element => (element.key !== 'id' && element.key !== 'created' && element.key !== 'modified'));

  // check that the object to be edited exists with the predicates - only get the minimum of data
  let editSelect = ['id','created','modified'];
  for (let editItem of input) {
    editSelect.push(editItem.key);
  }

  const sparqlQuery = selectVulnerabilityQuery(id, editSelect );
  let response = await dataSources.Stardog.queryById({
    dbName,
    sparqlQuery,
    queryId: "Select Vulnerability",
    singularizeSchema: singularizeVulnerabilitySchema
  });

  if (response.length === 0) throw new UserInputError(`Entity does not exist with ID ${id}`);

  // determine operation, if missing
  for (let editItem of input) {
    if (editItem.operation !== undefined) continue;

    // if value if empty then treat as a remove
    if (editItem.value.length === 0) { 
      editItem.operation = 'remove';
      continue;
    }
    if (Array.isArray(editItem.value) && editItem.value[0] === null) throw new UserInputError(`Field "${editItem.key}" has invalid value "null"`);

    if (!response[0].hasOwnProperty(editItem.key)) {
      editItem.operation = 'add';
    } else {
      editItem.operation = 'replace';

      // Set operation to 'skip' if no change in value
      if (response[0][editItem.key] === editItem.value) editItem.operation ='skip';
    }
  }

  // Push an edit to update the modified time of the object
  const timestamp = new Date().toISOString();
  
  if (!response[0].hasOwnProperty('created')) {
    let update = {key: "created", value:[`${timestamp}`], operation: "add"}
    input.push(update);
  }

  let operation = "replace";

  if (!response[0].hasOwnProperty('modified')) operation = "add";
  
  let update = {key: "modified", value:[`${timestamp}`], operation: `${operation}`}
  input.push(update);
  
  // Handle the update to fields that have references to other object instances
  for (let editItem  of input) {
    if (editItem.operation === 'skip') continue;

    let value, fieldType, objectType, objArray, iris=[];
    for (value of editItem.value) {
      switch(editItem.key) {
        case 'cna_tags':
          if (!validateEnumValue(value, 'CNATag', schema)) throw new UserInputError(`Invalid value "${value}" for field "${editItem.key}".`);
          editItem.value[0] = value.replace(/_/g,'-').toLowerCase();
          fieldType = 'simple';
          break;
        case 'state':
          if (!validateEnumValue(value, 'VulnerabilityState', schema)) throw new UserInputError(`Invalid value "${value}" for field "${editItem.key}".`);
          editItem.value[0] = value.replace(/_/g,'-').toLowerCase();
          fieldType = 'simple';
          break;
        case 'labels':
          objectType = 'label';
          fieldType = 'id';
          break;
        case 'links':
          objectType = 'external-reference';
          fieldType = 'id';
          break;
        case 'notes':
          objectType = 'note';
          fieldType = 'id';
          break;
        case 'metrics':
        case 'affected':
        case 'impacts':
        case 'problem_types':
        case 'credits':
        case 'taxonomy_mappings':
          throw new UserInputError(`Cannot directly edit field "${editItem.key}".`);
        default:
          fieldType = 'simple';
          break;
      }

      if (fieldType === 'id') {
        // continue to next item if nothing to do
        if (editItem.operation === 'skip') continue;

        let sparqlQuery = selectObjectIriByIdQuery(value, objectType);
        let result = await dataSources.Stardog.queryById({
          dbName,
          sparqlQuery,
          queryId: "Obtaining IRI for the object with id",
          singularizeSchema: singularizeVulnerabilitySchema
        });

        if (result === undefined || result.length === 0) throw new UserInputError(`Entity does not exist with ID ${value}`);
        iris.push(`<${result[0].iri}>`);
      }
    }
    if (iris.length > 0) editItem.value = iris;
  }

  const query = updateQuery(
    `http://cyio.darklight.ai/vulnerability--${id}`,
    "http://nist.gov/ns/vulnerability#Vulnerability",
    input,
    vulnerabilityPredicateMap
  );

  if (query !== null) {
    let response;
    try {
      response = await dataSources.Stardog.edit({
        dbName,
        sparqlQuery: query,
        queryId: "Update Vulnerability"
      });  
    } catch (e) {
      console.log(e)
      throw e
    }
  }

  const selectQuery = selectVulnerabilityQuery(id, select);

  const result = await dataSources.Stardog.queryById({
    dbName,
    sparqlQuery: selectQuery,
    queryId: "Select Vulnerability",
    singularizeSchema: singularizeVulnerabilitySchema
  });

  const reducer = getReducer("VULNERABILITY");

  return reducer(result[0]);
};

export const attachToVulnerability = async (id, field, entityId, dbName, dataSources) => {
  let sparqlQuery;
  if (!checkIfValidUUID(id)) throw new UserInputError(`Invalid identifier: ${id}`);
  if (!checkIfValidUUID(entityId)) throw new UserInputError(`Invalid identifier: ${entityId}`);

  // check to see if the vulnerability exists
  let select = ['id','iri','object_type'];
  let iri = `<http://cyio.darklight.ai/vulnerability--${id}>`;
  sparqlQuery = selectVulnerabilityQueryByIriQuery(iri, select);
  
  let response;
  try {
    response = await dataSources.Stardog.queryById({
      dbName,
      sparqlQuery,
      queryId: "Select Vulnerability",
      singularizeSchema: singularizeVulnerabilitySchema
    });
  } catch (e) {
    console.log(e)
    throw e
  }
  if (response === undefined || response === null || response.length === 0) throw new UserInputError(`Entity does not exist with ID ${id}`);

  let attachableObjects = {
    'metrics': 'cvss',
    'affected': 'affected-product',
    'impacts': 'impact-type',
    'problem_types': 'problem-type',
    'taxonomy_mappings': 'taxonmy-map-entry',
    'credits': 'credit'
  };

  let objectType = attachableObjects[field];
  try {
    // check to see if the entity exists
    sparqlQuery = selectObjectIriByIdQuery(entityId, objectType);
    response = await dataSources.Stardog.queryById({
      dbName: (objectType === 'marking-definition' ? conf.get('app:config:db_name') || 'cyio-config' : dbName),
      sparqlQuery,
      queryId: "Obtaining IRI for the object with id",
      singularizeSchema: singularizeVulnerabilitySchema
    });
  } catch (e) {
    console.log(e)
    throw e
  }

  let objectTypeMapping = {
    'metrics': [
      'cvss-v2',
      'cvss-v3',
      'cvss-v4'
    ],
    'affected': 'affected-product',
    'impacts': 'impact-type',
    'problem_types': 'problem-type',
    'taxonomy_mappings': 'taxonmy-map-entry',
    'credits': 'credit'
  };

  if (response === undefined || response === null || response.length === 0) throw new UserInputError(`Entity does not exist with ID ${entityId}`);
  
  // check to make sure entity to be attached is proper for the field specified
  if (field == 'metrics') {
    if (!objectTypeMapping[field].includes(response[0].object_type)) {
      throw new UserInputError(`Can not attach object of type '${response[0].object_type}' to field '${field}'`);
    }
  } else {
    if (response[0].object_type !== attachableObjects[field]) {
      if (!objectTypeMapping.hasOwnProperty(response[0].object_type)) throw new UserInputError(`Can not attach object of type '${response[0].object_type}' to field '${field}'`);
    }
  }

  // retrieve the IRI of the entity
  let entityIri = `<${response[0].iri}>`;

  // Attach the object to the vulnerability
  sparqlQuery = attachToVulnerabilityQuery(id, field, entityIri);
  try {
    response = await dataSources.Stardog.create({
      dbName,
      sparqlQuery,
      queryId: `Attach ${field} to Vulnerability`
      });
  } catch (e) {
    console.log(e)
    throw e
  }

  return true;
};

export const detachFromVulnerability = async (id, field, entityId, dbName, dataSources) => {
  let sparqlQuery;
  if (!checkIfValidUUID(id)) throw new UserInputError(`Invalid identifier: ${id}`);
  if (!checkIfValidUUID(entityId)) throw new UserInputError(`Invalid identifier: ${entityId}`);

  // check to see if the vulnerability exists
  let select = ['id','iri','object_type'];
  let iri = `<http://cyio.darklight.ai/vulnerability--${id}>`;
  sparqlQuery = selectVulnerabilityQueryByIriQuery(iri, select);
  let response;
  try {
    response = await dataSources.Stardog.queryById({
      dbName,
      sparqlQuery,
      queryId: "Select Vulnerability",
      singularizeSchema: singularizeVulnerabilitySchema
    });
  } catch (e) {
    console.log(e)
    throw e
  }
  if (response === undefined || response === null || response.length === 0) throw new UserInputError(`Entity does not exist with ID ${id}`);

  let attachableObjects = {
    'metrics': 'cvss',
    'affected': 'affected-product',
    'impacts': 'impact-type',
    'problem_types': 'problem-type',
    'taxonomy_mappings': 'taxonmy-map-entry',
    'credits': 'credit'
  };

  let objectType = attachableObjects[field];
  try {
    // check to see if the entity exists
    sparqlQuery = selectObjectIriByIdQuery(entityId, objectType);
    response = await dataSources.Stardog.queryById({
      dbName: (objectType === 'marking-definition' ? conf.get('app:config:db_name') || 'cyio-config' : dbName),
      sparqlQuery,
      queryId: "Obtaining IRI for the object with id",
      singularizeSchema: singularizeVulnerabilitySchema
    });
  } catch (e) {
    console.log(e)
    throw e
  }
  let objectTypeMapping = {
    'metrics': [
      'cvss-v2',
      'cvss-v3',
      'cvss-v4'
    ],
    'affected': 'affected-product',
    'impacts': 'impact-type',
    'problem_types': 'problem-type',
    'taxonomy_mappings': 'taxonmy-map-entry',
    'credits': 'credit'
  };

  if (response === undefined || response === null || response.length === 0) throw new UserInputError(`Entity does not exist with ID ${entityId}`);

  // check to make sure entity to be attached is proper for the field specified
  if (field == 'metrics') {
    if (!objectTypeMapping[field].includes(response[0].object_type)) {
      throw new UserInputError(`Can not attach object of type '${response[0].object_type}' to field '${field}'`);
    }
  } else {
    if (response[0].object_type !== attachableObjects[field]) {
      if (!objectTypeMapping.hasOwnProperty(response[0].object_type)) throw new UserInputError(`Can not attach object of type '${response[0].object_type}' to field '${field}'`);
    }
  }

  // retrieve the IRI of the entity
  let entityIri = `<${response[0].iri}>`;

  // Attach the object to the Vulnerability
  sparqlQuery = detachFromVulnerabilityQuery(id, field, entityIri);
  try {
    response = await dataSources.Stardog.create({
      dbName,
      sparqlQuery,
      queryId: `Detach ${field} from Vulnerability`
      });
  } catch (e) {
    console.log(e)
    throw e
  }

  return true;
};
