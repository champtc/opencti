import {
  findAllVulnerabilities,
  findVulnerabilityById,
  createVulnerability,
  deleteVulnerabilityById,
  editVulnerabilityById,
  attachToVulnerability,
  detachFromVulnerability,
} from '../domain/vulnerability.js';
import { findCvssMetricByIri } from '../domain/cvss.js';
import { findAffectedProductByIri } from '../domain/affectedProduct.js';
import { findImpactByIri } from '../domain/impact.js';
import { findProblemTypesByIri } from '../domain/problemType.js';
import { findTaxonomyByIri } from '../domain/taxonomyEntry.js';
import { findCreditByIri } from '../domain/credit.js';

import { findDataMarkingByIri } from '../../data-markings/domain/dataMarkings.js';

const cyioVulnerabilityResolvers = {
  Query: {
      vulnerabilities: async (_, args, { dbName, dataSources, selectMap }) => findAllVulnerabilities(args, dbName, dataSources, selectMap.getNode('node')),
      vulnerability: async (_, { id }, { dbName, dataSources, selectMap }) => findVulnerabilityById(id, dbName, dataSources, selectMap.getNode('vulnerability')),
  },
  Mutation: {
      createVulnerability: async (_, { input }, { dbName, selectMap, dataSources }) => createVulnerability(input, dbName, dataSources, selectMap.getNode("createVulnerability")),
      deleteVulnerability: async (_, { id }, { dbName, dataSources }) => deleteVulnerabilityById(id, dbName, dataSources),
      deleteVulnerabilities: async (_, { ids }, { dbName, dataSources }) => deleteVulnerabilityById(ids, dbName, dataSources),
      editVulnerability: async (_, { id, input }, { dbName, dataSources, selectMap }, {schema}) => editVulnerabilityById(id, input, dbName, dataSources, selectMap.getNode("editVulnerability"), schema),
      attachToVulnerability: async (_, { id, field, entityId }, { dbName, dataSources }) => attachToVulnerability(id, field, entityId ,dbName, dataSources),
      detachFromVulnerability: async (_, { id, field, entityId }, { dbName, dataSources }) => detachFromVulnerability(id, field, entityId ,dbName, dataSources),
  },
  Vulnerability : {
    metrics: async (parent, _, { dbName, dataSources, selectMap }) => {
      if (parent.metrics === undefined) return [];
      let results = []
      for (let iri of parent.metrics) {
        let result = await findCvssMetricByIri(iri, dbName, dataSources, selectMap.getNode('metrics'));
        if (result === undefined || result === null) return null;
        results.push(result);
      }
      return results;
    },
    affected: async (parent, _, { dbName, dataSources, selectMap }) => {
      if (parent.affected === undefined) return [];
      let results = [];
      for (let iri of parent.affected) {
        let result = await findAffectedProductByIri(iri, dbName, dataSources, selectMap.getNode('affected'));
        if (result === undefined || result === null) return null;
        results.push(result);
      }
      return results;
    },
    impacts: async (parent, _, { dbName, dataSources, selectMap }) => {
      if (parent.impacts === undefined) return [];
      let results = [];
      for (let iri of parent.impacts) {
        let result = await findImpactByIri(iri, dbName, dataSources, selectMap.getNode('impacts'));
        if (result === undefined || result === null) return null;
        results.push(result);
      }
      return results;
    },
    problem_types: async (parent, _, { dbName, dataSources, selectMap }) => {
      if (parent.problem_types === undefined) return [];
      let results = [];
      for (let iri of parent.problem_types) {
        let result = await findProblemTypesByIri(iri, dbName, dataSources, selectMap.getNode('problem_types'));
        if (result === undefined || result === null) return null;
        results.push(result);
      }
      return results;
    },
    taxonomy_mappings: async (parent, _, { dbName, dataSources, selectMap }) => {
      if (parent.taxonomy_mappings === undefined) return [];
      let results = [];
      for (let iri of parent.taxonomy_mappings) {
        let result = await findTaxonomyByIri(iri, dbName, dataSources, selectMap.getNode('taxonomy_mappings'));
        if (result === undefined || result === null) return null;
        results.push(result);
      }
      return results;
    },
    credits: async (parent, _, { dbName, dataSources, selectMap }) => {
      if (parent.credits === undefined) return [];
      let results = [];
      for (let iri of parent.credits) {
        let result = await findCreditByIri(iri, dbName, dataSources, selectMap.getNode('credits'));
        if (result === undefined || result === null) return null;
        results.push(result);
      }
      return results;
    },
    object_markings: async (parent, _, { dbName, dataSources, selectMap}) => {
      if (parent.marking_iris === undefined) return [];
      let results = []
      for (let iri of parent.marking_iris) {
        let result = await findDataMarkingByIri(iri, dbName, dataSources, selectMap.getNode('object_markings'));
        if (result === undefined || result === null) return null;
        results.push(result);
      }
      return results;
    },
    labels: async (parent, _, { dbName, dataSources, selectMap }) => {
      if (parent.label_iris === undefined) return [];
      let results = []
      for (let iri of parent.label_iris) {
        let result = await findLabelByIri(iri, dbName, dataSources, selectMap.getNode('labels'));
        if (result === undefined || result === null) return null;
        results.push(result);
      }
      return results;
    },
    external_references: async (parent, _, { dbName, dataSources, selectMap }) => {
      if (parent.link_iris === undefined) return [];
      let results = []
      for (let iri of parent.link_iris) {
        let result = await findLinkByIri(iri, dbName, dataSources, selectMap.getNode('external_references'));
        if (result === undefined || result === null) return null;
        results.push(result);
      }
      return results;
    },
    notes: async (parent, _, { dbName, dataSources, selectMap }) => {
      if (parent.remark_iris === undefined) return [];
      let results = []
      for (let iri of parent.remark_iris) {
        let result = await findRemarkByIri(iri, dbName, dataSources, selectMap.getNode('notes'));
        if (result === undefined || result === null) return null;
        results.push(result);
      }
      return results;
    },
  },
};

export default cyioVulnerabilityResolvers;
