import {
    findAllVulnerabilities,
    findVulnerabilityById,
    createVulnerability,
    deleteVulnerabilityById,
    deleteVulnerabilities,
    editVulnerabilityById,
    attachToVulnerability,
    detachFromVulnerability
} from '../domain/vulnerability.js';

const cyioVulnerabilityResolvers = {
    Query: {
      vulnerabilities: async (_, args, { dbName, dataSources, selectMap }) => findAllVulnerabilities(args, dbName, dataSources, selectMap.getNode('node')),
		  vulnerability: async (_, { id }, { dbName, dataSources, selectMap }) => findVulnerabilityById(id, dbName, dataSources, selectMap.getNode('vulnerability')),
    },
    Mutation: {
        // Vulnerability
        createVulnerability: async (_, { input }, { dbName, selectMap, dataSources }) => createVulnerability(input, dbName, dataSources, selectMap.getNode("createVulnerability")),
        /* deleteVulnerability: async (_, { id }, { dbName, dataSources }) => deleteVulnerabilityById(id, dbName, dataSources),
        deleteVulnerabilities: async (_, { ids }, { dbName, dataSources }) => deleteVulnerabilities(ids, dbName, dataSources),
        editVulnerability: async (_, { id, input }, { dbName, dataSources, selectMap }, {schema}) => editVulnerabilityById(id, input, dbName, dataSources, selectMap.getNode("editVulnerability"), schema),
        attachToVulnerability: async (_, { id, field, entityId }, { dbName, dataSources }) => attachToVulnerability(id, field, entityId ,dbName, dataSources),
        detachFromVulnerability: async (_, { id, field, entityId }, { dbName, dataSources }) => detachFromVulnerability(id, field, entityId ,dbName, dataSources), */
    }
};

export default cyioVulnerabilityResolvers;
