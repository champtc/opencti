import {
    findAllVulnerabilities,
    findVulnerabilityById,
    createVulnerability,
    deleteVulnerability,
    deleteVulnerabilities,
    editVulnerability,
    attachToVulnerability,
    detachFromVulnerability,
    createAffectedProduct,
    deleteAffectedProduct,
    deleteAffectedProducts,
    editAffectedProduct,
    attachToAffectedProduct,
    detachFromAffectedProduct,
    createCredit,
    deleteCredit,
    deleteCredits,
    editCredit,
    createImpact,
    deleteImpact,
    deleteImpacts,
    editImpact,
    createMetric,
    deleteMetric,
    deleteMetrics,
    editMetric,
    attachToMetric,
    detachFromMetric,
    createProblemType,
    deleteProblemType,
    deleteProblemTypes,
    editProblemType,
    attachToProblemType,
    detachFromProblemType,
    createTaxonomyEntry,
    deleteTaxonomyEntry,
    deleteTaxonomyEntries,
    editTaxonomyEntry,
    attachToTaxonomyEntry,
    detachFromTaxonomyEntry,
    createUnknownMetric,
    deleteUnknownMetric,
    deleteUnknownMetrics,
    editUnknown,
} from '../domain/vulnerability.js';

const cyioVulnerabilityResolvers = {
    /* Query: {
        vulnerabilities: async (_, args, { dbName, dataSources, selectMap }) => findAllVulnerabilities(args, dbName, dataSources, selectMap.getNode('node')),
		vulnerability: async (_, { id }, { dbName, dataSources, selectMap }) => findVulnerabilityById(id, dbName, dataSources, selectMap.getNode('vulnerability')),
    }, */
    Mutation: {
        // Vulnerability
        createVulnerability: async (_, { input }, { dbName, selectMap, dataSources }) => createVulnerability(input, dbName, dataSources, selectMap.getNode("createVulnerability")),
        /* deleteVulnerability: async (_, { id }, { dbName, dataSources }) => deleteVulnerability(id, dbName, dataSources),
        deleteVulnerabilities: async (_, { ids }, { dbName, dataSources }) => deleteVulnerabilities(ids, dbName, dataSources),
        editVulnerability: async (_, { id }, { dbName, dataSources, selectMap }) => editVulnerability(id, dbName, dataSources, selectMap.getNode('editVulnerability')),
        attachToVulnerability: async (_, { id }, { dbName, dataSources }) => attachToVulnerability(id, dbName, dataSources),
        detachFromVulnerability: async (_, { id }, { dbName, dataSources }) => detachFromVulnerability(id, dbName, dataSources),
        
        // Affected Product
        createAffectedProduct: async (_, { input }, { dbName, selectMap, dataSources }) => createAffectedProduct(input, dbName, dataSources, selectMap.getNode("createAffectedProduct")),
        deleteAffectedProduct: async (_, { id }, { dbName, dataSources }) => deleteAffectedProduct(id, dbName, dataSources),
        deleteAffectedProducts: async (_, { ids }, { dbName, dataSources }) => deleteAffectedProducts(ids, dbName, dataSources),
        editAffectedProduct: async (_, { id }, { dbName, dataSources, selectMap }) => editAffectedProduct(id, dbName, dataSources, selectMap.getNode('editAffectedProduct')),
        attachToAffectedProduct: async (_, { id }, { dbName, dataSources }) => attachToAffectedProduct(id, dbName, dataSources),
        detachFromAffectedProduct: async (_, { id }, { dbName, dataSources }) => detachFromAffectedProduct(id, dbName, dataSources),

        // Credit
        createCredit: async (_, { input }, { dbName, selectMap, dataSources }) => createCredit(input, dbName, dataSources, selectMap.getNode("createCredit")),
        deleteCredit: async (_, { id }, { dbName, dataSources }) => deleteCredit(id, dbName, dataSources),
        deleteCredits: async (_, { ids }, { dbName, dataSources }) => deleteCredits(ids, dbName, dataSources),
        editCredit: async (_, { id }, { dbName, dataSources, selectMap }) => editCredit(id, dbName, dataSources, selectMap.getNode('editCredit')),

        // ImpactType
        createImpact: async (_, { input }, { dbName, selectMap, dataSources }) => createImpact(input, dbName, dataSources, selectMap.getNode("createImpact")),
        deleteImpact: async (_, { id }, { dbName, dataSources }) => deleteImpact(id, dbName, dataSources),
        deleteImpacts: async (_, { ids }, { dbName, dataSources }) => deleteImpacts(ids, dbName, dataSources),
        editImpact: async (_, { id }, { dbName, dataSources, selectMap }) => editImpact(id, dbName, dataSources, selectMap.getNode('editImpact')),

        // MetricType
        createMetric: async (_, { input }, { dbName, selectMap, dataSources }) => createMetric(input, dbName, dataSources, selectMap.getNode("createMetric")),
        deleteMetric: async (_, { id }, { dbName, dataSources }) => deleteMetric(id, dbName, dataSources),
        deleteMetrics: async (_, { ids }, { dbName, dataSources }) => deleteMetrics(ids, dbName, dataSources),
        editMetric: async (_, { id }, { dbName, dataSources, selectMap }) => editMetric(id, dbName, dataSources, selectMap.getNode('editMetric')),
        attachToMetric: async (_, { id }, { dbName, dataSources }) => attachToMetric(id, dbName, dataSources),
        detachFromMetric: async (_, { id }, { dbName, dataSources }) => detachFromMetric(id, dbName, dataSources),

        // ProblemType
        createProblemType: async (_, { input }, { dbName, selectMap, dataSources }) => createProblemType(input, dbName, dataSources, selectMap.getNode("createProblemType")),
        deleteProblemType: async (_, { id }, { dbName, dataSources }) => deleteProblemType(id, dbName, dataSources),
        deleteProblemTypes: async (_, { ids }, { dbName, dataSources }) => deleteProblemTypes(ids, dbName, dataSources),
        editProblemType: async (_, { id }, { dbName, dataSources, selectMap }) => editProblemType(id, dbName, dataSources, selectMap.getNode('editProblemType')),
        attachToProblemType: async (_, { id }, { dbName, dataSources }) => attachToProblemType(id, dbName, dataSources),
        detachFromProblemType: async (_, { id }, { dbName, dataSources }) => detachFromProblemType(id, dbName, dataSources),

        // TaxonomyEntry
        createTaxonomyEntry: async (_, { input }, { dbName, selectMap, dataSources }) => createTaxonomyEntry(input, dbName, dataSources, selectMap.getNode("createTaxonomyEntry")),
        deleteTaxonomyEntry: async (_, { id }, { dbName, dataSources }) => deleteTaxonomyEntry(id, dbName, dataSources),
        deleteTaxonomyEntries: async (_, { ids }, { dbName, dataSources }) => deleteTaxonomyEntries(ids, dbName, dataSources),
        editTaxonomyEntry: async (_, { id }, { dbName, dataSources, selectMap }) => editTaxonomyEntry(id, dbName, dataSources, selectMap.getNode('editTaxonomyEntry')),
        attachToTaxonomyEntry: async (_, { id }, { dbName, dataSources }) => attachToTaxonomyEntry(id, dbName, dataSources),
        detachFromTaxonomyEntry: async (_, { id }, { dbName, dataSources }) => detachFromTaxonomyEntry(id, dbName, dataSources),

        // UnknownMetric
        createUnknownMetric: async (_, { input }, { dbName, selectMap, dataSources }) => createUnknownMetric(input, dbName, dataSources, selectMap.getNode("createUnknownMetric")),
        deleteUnknownMetric: async (_, { id }, { dbName, dataSources }) => deleteUnknownMetric(id, dbName, dataSources),
        deleteUnknownMetrics: async (_, { ids }, { dbName, dataSources }) => deleteUnknownMetrics(ids, dbName, dataSources),
        editUnknown: async (_, { id }, { dbName, dataSources, selectMap }) => editUnknown(id, dbName, dataSources, selectMap.getNode('editUnknown')), */
    },
};

export default cyioVulnerabilityResolvers;
