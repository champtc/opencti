import { UserInputError } from 'apollo-server-errors';
import { 
  optionalizePredicate, 
  parameterizePredicate, 
  buildSelectVariables, 
  attachQuery,
  detachQuery,
  generateId, 
  DARKLIGHT_NS,
  checkIfValidUUID,
} from '../../../utils.js';

// Reducer Selection
export function getReducer(type) {
  switch (type) {
    case 'VULNERABILITY':
      return vulnerabilityReducer;
    default:
      throw new UserInputError(`Unsupported reducer type ' ${type}'`)
  }
}

const vulnerabilityReducer = (item) => {
  // if no object type was returned, compute the type from the IRI
  if (item.object_type === undefined) {
    if (item.entity_type !== undefined) item.object_type = item.entity_type;
    if (item.iri.includes('vulnerability')) item.object_type = 'vulnerability';
}

return {
    iri: item.iri,
    id: item.id,
    ...(item.object_type && { entity_type: item.object_type }),
    ...(item.created && { created: item.created }),
    ...(item.modified && { modified: item.modified }),
    ...(item.labels && { labels: item.labels }),
    ...(item.external_references && { external_references: item.external_references }),
    ...(item.notes && { notes: item.notes }),
    ...(item.object_markings && { object_markings: item.object_markings }),
    ...(item.title && { title: item.title }),
    ...(item.description && { description: item.description }),
    ...(item.assigner_org_id && { assigner_org_id: item.assigner_org_id }),
    ...(item.assigner_short_name && { assigner_short_name: item.assigner_short_name }),
    ...(item.provider_org_id && { provider_org_id: item.provider_org_id }),
    ...(item.provider_short_name && { provider_short_name: item.provider_short_name }),
    ...(item.requester_user_id !== undefined && {requester_user_id: item.requester_user_id }),
    ...(item.date_updated !== undefined && {date_updated: item.date_updated}),
    ...(item.serial && { serial: item.serial }),
    ...(item.date_reserved && { date_reserved: item.date_reserved }),
    ...(item.date_published && { date_published: item.date_published }),
    ...(item.date_submitted && { date_submitted: item.date_submitted }),
    // hints for field-level resolver queries
    ...(item.date_assigned && {date_assigned: item.date_assigned}),
    ...(item.date_public_disclosure && { date_public_disclosure: item.date_public_disclosure }),
    ...(item.VulnerabilityState && { VulnerabilityState: item.VulnerabilityState }),
    ...(item.affected && { affected: item.affected }),
    ...(item.problem_types && { problem_types: item.problem_types }),
    ...(item.impacts && { impacts: item.impacts }),
    // Use instead of system_implementation as the elements are base properties on InformationSystem
    ...(item.metrics && { metrics: item.metrics }),
    ...(item.configurations && { configurations: item.configurations }),
    ...(item.workarounds && { workarounds: item.workarounds }),
    ...(item.solutions && { solutions: item.solutions }),
    // hints for general lists of items
    ...(item.exploits && {marking_iris: item.exploits}),
    ...(item.timeline && { timeline: item.timeline }),
    ...(item.credits && { credits: item.credits }),
    ...(item.source && { source: item.source }),
    // hints for retrieving risk count and highest severity
    ...(item.cna_tags && { cna_tags: item.cna_tags }),
    ...(item.taxonomy_mappings !== undefined && { taxonomy_mappings: item.taxonomy_mappings }),
    ...(item.cisa_exploit_add !== undefined && { cisa_exploit_add: item.cisa_exploit_add }),
    ...(item.cisa_action_due && { cisa_action_due: item.cisa_action_due }),

    ...(item.cisa_required_action && { cisa_required_action: item.cisa_required_action }),
    ...(item.cisa_vulnerability_name && { cisa_vulnerability_name: item.cisa_vulnerability_name }),
  }
};

// Serialization schema
export const singularizeDescriptionBlockSchema = { 
  singularizeVariables: {
    "": false, // so there is an object as the root instead of an array
    "id": true,
    "iri": true,
    "object_type": true,
    "entity_type": true,
    "created": true,
    "modified": true,
    "description": true,
  }
};

// Predicate Maps
export const vulnerabilityPredicateMap = {
  id: {
    predicate: "<http://darklight.ai/ns/common#id>",
    binding: function (iri, value) { return parameterizePredicate(iri, value ? `"${value}"`: null, this.predicate, "id");},
    optional: function (iri, value) { return optionalizePredicate(this.binding(iri, value));},
  },
  object_type: {
    predicate: "<http://darklight.ai/ns/common#object_type>",
    binding: function (iri, value) { return parameterizePredicate(iri, value ? `"${value}"` : null,  this.predicate, "object_type");},
    optional: function (iri, value) { return optionalizePredicate(this.binding(iri, value));},
  },
  entity_type: {
    predicate: "<http://darklight.ai/ns/common#object_type>",
    binding: function (iri, value) { return parameterizePredicate(iri, value ? `"${value}"` : null,  this.predicate, "entity_type");},
    optional: function (iri, value) { return optionalizePredicate(this.binding(iri, value));},
  },
  created: {
    predicate: "<http://darklight.ai/ns/common#created>",
    binding: function (iri, value) { return parameterizePredicate(iri, value ? `"${value}"^^xsd:dateTime` : null,  this.predicate, "created");},
    optional: function (iri, value) { return optionalizePredicate(this.binding(iri, value));},
  },
  modified: {
    predicate: "<http://darklight.ai/ns/common#modified>",
    binding: function (iri, value) { return parameterizePredicate(iri, value ? `"${value}"^^xsd:dateTime` : null,  this.predicate, "modified");},
    optional: function (iri, value) { return optionalizePredicate(this.binding(iri, value));},
  },
  labels: {
    predicate: "<http://csrc.nist.gov/ns/oscal/common#labels>",
    binding: function (iri, value) { return parameterizePredicate(iri, value ? `"${value}"` : null,  this.predicate, "labels");},
    optional: function (iri, value) { return optionalizePredicate(this.binding(iri, value));},
  },
  external_references: {
    predicate: "<http://csrc.nist.gov/ns/oscal/common#external_references>",
    binding: function (iri, value) { return parameterizePredicate(iri, value ? `"${value}"` : null,  this.predicate, "external_references");},
    optional: function (iri, value) { return optionalizePredicate(this.binding(iri, value));},
  },
  notes: {
    predicate: "<http://csrc.nist.gov/ns/oscal/common#notes>",
    binding: function (iri, value) { return parameterizePredicate(iri, value ? `"${value}"` : null,  this.predicate, "notes");},
    optional: function (iri, value) { return optionalizePredicate(this.binding(iri, value));},
  },
  object_markings: {
    predicate: "<http://csrc.nist.gov/ns/oscal/common#object_markings>",
    binding: function (iri, value) { return parameterizePredicate(iri, value ? `"${value}"` : null,  this.predicate, "object_markings");},
    optional: function (iri, value) { return optionalizePredicate(this.binding(iri, value));},
  },
  vulnerability_id: {
    predicate: "<http://csrc.nist.gov/ns/oscal/common#vulnerability_id>",
    binding: function (iri, value) { return parameterizePredicate(iri, value ? `"${value}"` : null,  this.predicate, "vulnerability_id");},
    optional: function (iri, value) { return optionalizePredicate(this.binding(iri, value));},
  },
  title: {
    predicate: "<http://csrc.nist.gov/ns/oscal/common#title>",
    binding: function (iri, value) { return parameterizePredicate(iri, value ? `"${value}"` : null,  this.predicate, "title");},
    optional: function (iri, value) { return optionalizePredicate(this.binding(iri, value));},
  },
  description: {
    predicate: "<http://csrc.nist.gov/ns/oscal/common#description>",
    binding: function (iri, value) { return parameterizePredicate(iri, value ? `"${value}"` : null,  this.predicate, "description");},
    optional: function (iri, value) { return optionalizePredicate(this.binding(iri, value));},
  },
  assigner_org_id: {
    predicate: "<http://csrc.nist.gov/ns/oscal/common#assigner_org_id>",
    binding: function (iri, value) { return parameterizePredicate(iri, value ? `"${value}"` : null,  this.predicate, "assigner_org_id");},
    optional: function (iri, value) { return optionalizePredicate(this.binding(iri, value));},
  },
  assigner_short_name: {
    predicate: "<http://csrc.nist.gov/ns/oscal/common#assigner_short_name>",
    binding: function (iri, value) { return parameterizePredicate(iri, value ? `"${value}"` : null,  this.predicate, "assigner_short_name");},
    optional: function (iri, value) { return optionalizePredicate(this.binding(iri, value));},
  },
  provider_org_id: {
    predicate: "<http://csrc.nist.gov/ns/oscal/common#provider_org_id>",
    binding: function (iri, value) { return parameterizePredicate(iri, value ? `"${value}"` : null,  this.predicate, "provider_org_id");},
    optional: function (iri, value) { return optionalizePredicate(this.binding(iri, value));},
  },
  provider_short_name: {
    predicate: "<http://csrc.nist.gov/ns/oscal/common#provider_short_name>",
    binding: function (iri, value) { return parameterizePredicate(iri, value ? `"${value}"` : null,  this.predicate, "provider_short_name");},
    optional: function (iri, value) { return optionalizePredicate(this.binding(iri, value));},
  },
  requester_user_id: {
    predicate: "<http://csrc.nist.gov/ns/oscal/common#requester_user_id>",
    binding: function (iri, value) { return parameterizePredicate(iri, value ? `"${value}"` : null,  this.predicate, "requester_user_id");},
    optional: function (iri, value) { return optionalizePredicate(this.binding(iri, value));},
  },
  date_updated: {
    predicate: "<http://csrc.nist.gov/ns/oscal/common#date_updated>",
    binding: function (iri, value) { return parameterizePredicate(iri, value ? `"${value}"` : null,  this.predicate, "date_updated");},
    optional: function (iri, value) { return optionalizePredicate(this.binding(iri, value));},
  },
  serial: {
    predicate: "<http://csrc.nist.gov/ns/oscal/common#serial>",
    binding: function (iri, value) { return parameterizePredicate(iri, value ? `"${value}"` : null,  this.predicate, "serial");},
    optional: function (iri, value) { return optionalizePredicate(this.binding(iri, value));},
  },
  date_reserved: {
    predicate: "<http://csrc.nist.gov/ns/oscal/common#date_reserved>",
    binding: function (iri, value) { return parameterizePredicate(iri, value ? `"${value}"` : null,  this.predicate, "date_reserved");},
    optional: function (iri, value) { return optionalizePredicate(this.binding(iri, value));},
  },
  date_published: {
    predicate: "<http://csrc.nist.gov/ns/oscal/common#date_published>",
    binding: function (iri, value) { return parameterizePredicate(iri, value ? `"${value}"` : null,  this.predicate, "date_published");},
    optional: function (iri, value) { return optionalizePredicate(this.binding(iri, value));},
  },
  date_submitted: {
    predicate: "<http://csrc.nist.gov/ns/oscal/common#date_submitted>",
    binding: function (iri, value) { return parameterizePredicate(iri, value ? `"${value}"` : null,  this.predicate, "date_submitted");},
    optional: function (iri, value) { return optionalizePredicate(this.binding(iri, value));},
  },
  date_assigned: {
    predicate: "<http://csrc.nist.gov/ns/oscal/common#date_assigned>",
    binding: function (iri, value) { return parameterizePredicate(iri, value ? `"${value}"` : null,  this.predicate, "date_assigned");},
    optional: function (iri, value) { return optionalizePredicate(this.binding(iri, value));},
  },
  date_public_disclosure: {
    predicate: "<http://csrc.nist.gov/ns/oscal/common#date_public_disclosure>",
    binding: function (iri, value) { return parameterizePredicate(iri, value ? `"${value}"` : null,  this.predicate, "date_public_disclosure");},
    optional: function (iri, value) { return optionalizePredicate(this.binding(iri, value));},
  },
  state: {
    predicate: "<http://csrc.nist.gov/ns/oscal/common#state>",
    binding: function (iri, value) { return parameterizePredicate(iri, value ? `"${value}"` : null,  this.predicate, "state");},
    optional: function (iri, value) { return optionalizePredicate(this.binding(iri, value));},
  },
  affected: {
    predicate: "<http://csrc.nist.gov/ns/oscal/common#affected>",
    binding: function (iri, value) { return parameterizePredicate(iri, value ? `"${value}"` : null,  this.predicate, "affected");},
    optional: function (iri, value) { return optionalizePredicate(this.binding(iri, value));},
  },
  problem_types: {
    predicate: "<http://csrc.nist.gov/ns/oscal/common#problem_types>",
    binding: function (iri, value) { return parameterizePredicate(iri, value ? `"${value}"` : null,  this.predicate, "problem_types");},
    optional: function (iri, value) { return optionalizePredicate(this.binding(iri, value));},
  },
  impacts: {
    predicate: "<http://csrc.nist.gov/ns/oscal/common#impacts>",
    binding: function (iri, value) { return parameterizePredicate(iri, value ? `"${value}"` : null,  this.predicate, "impacts");},
    optional: function (iri, value) { return optionalizePredicate(this.binding(iri, value));},
  },
  metrics: {
    predicate: "<http://csrc.nist.gov/ns/oscal/common#metrics>",
    binding: function (iri, value) { return parameterizePredicate(iri, value ? `"${value}"` : null,  this.predicate, "metrics");},
    optional: function (iri, value) { return optionalizePredicate(this.binding(iri, value));},
  },
  configurations: {
    predicate: "<http://csrc.nist.gov/ns/oscal/common#configurations>",
    binding: function (iri, value) { return parameterizePredicate(iri, value ? `"${value}"` : null,  this.predicate, "configurations");},
    optional: function (iri, value) { return optionalizePredicate(this.binding(iri, value));},
  },
  workarounds: {
    predicate: "<http://csrc.nist.gov/ns/oscal/common#workarounds>",
    binding: function (iri, value) { return parameterizePredicate(iri, value ? `"${value}"` : null,  this.predicate, "workarounds");},
    optional: function (iri, value) { return optionalizePredicate(this.binding(iri, value));},
  },
  solutions: {
    predicate: "<http://csrc.nist.gov/ns/oscal/common#solutions>",
    binding: function (iri, value) { return parameterizePredicate(iri, value ? `"${value}"` : null,  this.predicate, "solutions");},
    optional: function (iri, value) { return optionalizePredicate(this.binding(iri, value));},
  },
  exploits: {
    predicate: "<http://csrc.nist.gov/ns/oscal/common#exploits>",
    binding: function (iri, value) { return parameterizePredicate(iri, value ? `"${value}"` : null,  this.predicate, "exploits");},
    optional: function (iri, value) { return optionalizePredicate(this.binding(iri, value));},
  },
  timeline: {
    predicate: "<http://csrc.nist.gov/ns/oscal/common#timeline>",
    binding: function (iri, value) { return parameterizePredicate(iri, value ? `"${value}"` : null,  this.predicate, "timeline");},
    optional: function (iri, value) { return optionalizePredicate(this.binding(iri, value));},
  },
  credits: {
    predicate: "<http://csrc.nist.gov/ns/oscal/common#credits>",
    binding: function (iri, value) { return parameterizePredicate(iri, value ? `"${value}"` : null,  this.predicate, "credits");},
    optional: function (iri, value) { return optionalizePredicate(this.binding(iri, value));},
  },
  source: {
    predicate: "<http://csrc.nist.gov/ns/oscal/common#source>",
    binding: function (iri, value) { return parameterizePredicate(iri, value ? `"${value}"` : null,  this.predicate, "source");},
    optional: function (iri, value) { return optionalizePredicate(this.binding(iri, value));},
  },
  cna_tags: {
    predicate: "<http://csrc.nist.gov/ns/oscal/common#cna_tags>",
    binding: function (iri, value) { return parameterizePredicate(iri, value ? `"${value}"` : null,  this.predicate, "cna_tags");},
    optional: function (iri, value) { return optionalizePredicate(this.binding(iri, value));},
  },
  taxonomy_mappings: {
    predicate: "<http://csrc.nist.gov/ns/oscal/common#taxonomy_mappings>",
    binding: function (iri, value) { return parameterizePredicate(iri, value ? `"${value}"` : null,  this.predicate, "taxonomy_mappings");},
    optional: function (iri, value) { return optionalizePredicate(this.binding(iri, value));},
  },
  cisa_exploit_add: {
    predicate: "<http://csrc.nist.gov/ns/oscal/common#cisa_exploit_add>",
    binding: function (iri, value) { return parameterizePredicate(iri, value ? `"${value}"` : null,  this.predicate, "cisa_exploit_add");},
    optional: function (iri, value) { return optionalizePredicate(this.binding(iri, value));},
  },
  cisa_action_due: {
    predicate: "<http://csrc.nist.gov/ns/oscal/common#cisa_action_due>",
    binding: function (iri, value) { return parameterizePredicate(iri, value ? `"${value}"` : null,  this.predicate, "cisa_action_due");},
    optional: function (iri, value) { return optionalizePredicate(this.binding(iri, value));},
  },
  cisa_required_action: {
    predicate: "<http://csrc.nist.gov/ns/oscal/common#cisa_required_action>",
    binding: function (iri, value) { return parameterizePredicate(iri, value ? `"${value}"` : null,  this.predicate, "cisa_required_action");},
    optional: function (iri, value) { return optionalizePredicate(this.binding(iri, value));},
  },
  cisa_vulnerability_name: {
    predicate: "<http://csrc.nist.gov/ns/oscal/common#cisa_vulnerability_name>",
    binding: function (iri, value) { return parameterizePredicate(iri, value ? `"${value}"` : null,  this.predicate, "cisa_vulnerability_name");},
    optional: function (iri, value) { return optionalizePredicate(this.binding(iri, value));},
  },
};

export const insertVulnerabilityQuery = (propValues) => {
  // determine id value
  // ${@genid}('vulnerability_id':${vulnerability_id})
  const id_material = { ...(propValues.vulnerability_id && {"vulnerability_id": propValues.vulnerability_id}), } ;
  
  const id = generateId( id_material, DARKLIGHT_NS );
  const timestamp = new Date().toISOString();

  // determine the appropriate ontology class type
  const iri = `<http://cyio.darklight.ai/vulnerability--${id}>`;
  const insertPredicates = [];
  
  Object.entries(propValues).forEach((propPair) => {
    if (vulnerabilityPredicateMap.hasOwnProperty(propPair[0])) {
      if (Array.isArray(propPair[1])) {
        for (let value of propPair[1]) {
          insertPredicates.push(vulnerabilityPredicateMap[propPair[0]].binding(iri, value));
        }  
      } else {
        insertPredicates.push(vulnerabilityPredicateMap[propPair[0]].binding(iri, propPair[1]));
      }
    }
  });

  const query = `
  INSERT DATA {
    GRAPH ${iri} {
      ${iri} a <http://nist.gov/ns/vulnerability#Vulnerability> .
      ${iri} a <http://oasis-org/ns/cti/stix/domain/Vulnerability> .
      ${iri} a <http://darklight.ai/ns/common#Object> .
      ${iri} <http://darklight.ai/ns/common#id> "${id}" .
      ${iri} <http://darklight.ai/ns/common#object_type> "vulnerability" . 
      ${iri} <http://darklight.ai/ns/common#created> "${timestamp}"^^xsd:dateTime . 
      ${iri} <http://darklight.ai/ns/common#modified> "${timestamp}"^^xsd:dateTime . 
      ${insertPredicates.join(" . \n")}
    }
  }
  `;
  return {iri, id, query}
}

// Query Builders - DescriptionBlock
export const selectVulnerabilityQuery = (id, select) => {
  return selectVulnerabilityQueryByIriQuery(`http://cyio.darklight.ai/vulnerability--${id}`, select);
}

export const selectVulnerabilityQueryByIriQuery = (iri, select) => {
  if (!iri.startsWith('<')) iri = `<${iri}>`;
  if (select === undefined || select === null) select = Object.keys(vulnerabilityPredicateMap);

  // this is needed to assist in the determination of the type of the data source
  if (!select.includes('id')) select.push('id');
  if (!select.includes('object_type')) select.push('object_type');

  const { selectionClause, predicates } = buildSelectVariables(vulnerabilityPredicateMap, select);
  return `
  SELECT ?iri ${selectionClause}
  FROM <tag:stardog:api:context:local>
  WHERE {
    BIND(${iri} AS ?iri)
    ?iri a <http://nist.gov/ns/vulnerability#Vulnerability> .
    ${predicates}
  }`
}
